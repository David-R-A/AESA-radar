// aesa_radar_hps.v

// Generated using ACDS version 23.1 993

`timescale 1 ps / 1 ps
module aesa_radar_hps (
		input  wire        clk_clk,                             //                     clk.clk
		input  wire [7:0]  fpga_state_reg_export,               //          fpga_state_reg.export
		output wire        hps_io_hps_io_emac1_inst_TX_CLK,     //                  hps_io.hps_io_emac1_inst_TX_CLK
		output wire        hps_io_hps_io_emac1_inst_TXD0,       //                        .hps_io_emac1_inst_TXD0
		output wire        hps_io_hps_io_emac1_inst_TXD1,       //                        .hps_io_emac1_inst_TXD1
		output wire        hps_io_hps_io_emac1_inst_TXD2,       //                        .hps_io_emac1_inst_TXD2
		output wire        hps_io_hps_io_emac1_inst_TXD3,       //                        .hps_io_emac1_inst_TXD3
		input  wire        hps_io_hps_io_emac1_inst_RXD0,       //                        .hps_io_emac1_inst_RXD0
		inout  wire        hps_io_hps_io_emac1_inst_MDIO,       //                        .hps_io_emac1_inst_MDIO
		output wire        hps_io_hps_io_emac1_inst_MDC,        //                        .hps_io_emac1_inst_MDC
		input  wire        hps_io_hps_io_emac1_inst_RX_CTL,     //                        .hps_io_emac1_inst_RX_CTL
		output wire        hps_io_hps_io_emac1_inst_TX_CTL,     //                        .hps_io_emac1_inst_TX_CTL
		input  wire        hps_io_hps_io_emac1_inst_RX_CLK,     //                        .hps_io_emac1_inst_RX_CLK
		input  wire        hps_io_hps_io_emac1_inst_RXD1,       //                        .hps_io_emac1_inst_RXD1
		input  wire        hps_io_hps_io_emac1_inst_RXD2,       //                        .hps_io_emac1_inst_RXD2
		input  wire        hps_io_hps_io_emac1_inst_RXD3,       //                        .hps_io_emac1_inst_RXD3
		inout  wire        hps_io_hps_io_sdio_inst_CMD,         //                        .hps_io_sdio_inst_CMD
		inout  wire        hps_io_hps_io_sdio_inst_D0,          //                        .hps_io_sdio_inst_D0
		inout  wire        hps_io_hps_io_sdio_inst_D1,          //                        .hps_io_sdio_inst_D1
		output wire        hps_io_hps_io_sdio_inst_CLK,         //                        .hps_io_sdio_inst_CLK
		inout  wire        hps_io_hps_io_sdio_inst_D2,          //                        .hps_io_sdio_inst_D2
		inout  wire        hps_io_hps_io_sdio_inst_D3,          //                        .hps_io_sdio_inst_D3
		inout  wire        hps_io_hps_io_usb1_inst_D0,          //                        .hps_io_usb1_inst_D0
		inout  wire        hps_io_hps_io_usb1_inst_D1,          //                        .hps_io_usb1_inst_D1
		inout  wire        hps_io_hps_io_usb1_inst_D2,          //                        .hps_io_usb1_inst_D2
		inout  wire        hps_io_hps_io_usb1_inst_D3,          //                        .hps_io_usb1_inst_D3
		inout  wire        hps_io_hps_io_usb1_inst_D4,          //                        .hps_io_usb1_inst_D4
		inout  wire        hps_io_hps_io_usb1_inst_D5,          //                        .hps_io_usb1_inst_D5
		inout  wire        hps_io_hps_io_usb1_inst_D6,          //                        .hps_io_usb1_inst_D6
		inout  wire        hps_io_hps_io_usb1_inst_D7,          //                        .hps_io_usb1_inst_D7
		input  wire        hps_io_hps_io_usb1_inst_CLK,         //                        .hps_io_usb1_inst_CLK
		output wire        hps_io_hps_io_usb1_inst_STP,         //                        .hps_io_usb1_inst_STP
		input  wire        hps_io_hps_io_usb1_inst_DIR,         //                        .hps_io_usb1_inst_DIR
		input  wire        hps_io_hps_io_usb1_inst_NXT,         //                        .hps_io_usb1_inst_NXT
		input  wire        hps_io_hps_io_uart0_inst_RX,         //                        .hps_io_uart0_inst_RX
		output wire        hps_io_hps_io_uart0_inst_TX,         //                        .hps_io_uart0_inst_TX
		inout  wire        hps_io_hps_io_gpio_inst_GPIO35,      //                        .hps_io_gpio_inst_GPIO35
		output wire [7:0]  hps_state_reg_export,                //           hps_state_reg.export
		output wire [14:0] memory_mem_a,                        //                  memory.mem_a
		output wire [2:0]  memory_mem_ba,                       //                        .mem_ba
		output wire        memory_mem_ck,                       //                        .mem_ck
		output wire        memory_mem_ck_n,                     //                        .mem_ck_n
		output wire        memory_mem_cke,                      //                        .mem_cke
		output wire        memory_mem_cs_n,                     //                        .mem_cs_n
		output wire        memory_mem_ras_n,                    //                        .mem_ras_n
		output wire        memory_mem_cas_n,                    //                        .mem_cas_n
		output wire        memory_mem_we_n,                     //                        .mem_we_n
		output wire        memory_mem_reset_n,                  //                        .mem_reset_n
		inout  wire [31:0] memory_mem_dq,                       //                        .mem_dq
		inout  wire [3:0]  memory_mem_dqs,                      //                        .mem_dqs
		inout  wire [3:0]  memory_mem_dqs_n,                    //                        .mem_dqs_n
		output wire        memory_mem_odt,                      //                        .mem_odt
		output wire [3:0]  memory_mem_dm,                       //                        .mem_dm
		input  wire        memory_oct_rzqin,                    //                        .oct_rzqin
		output wire        pll_0_outclk0_clk,                   //           pll_0_outclk0.clk
		input  wire        system_input_bridge_ei_acknowledge,  //  system_input_bridge_ei.acknowledge
		input  wire        system_input_bridge_ei_irq,          //                        .irq
		output wire [5:0]  system_input_bridge_ei_address,      //                        .address
		output wire        system_input_bridge_ei_bus_enable,   //                        .bus_enable
		output wire [3:0]  system_input_bridge_ei_byte_enable,  //                        .byte_enable
		output wire        system_input_bridge_ei_rw,           //                        .rw
		output wire [31:0] system_input_bridge_ei_write_data,   //                        .write_data
		input  wire [31:0] system_input_bridge_ei_read_data,    //                        .read_data
		input  wire [29:0] system_output_bridge_ei_address,     // system_output_bridge_ei.address
		input  wire [7:0]  system_output_bridge_ei_byte_enable, //                        .byte_enable
		input  wire        system_output_bridge_ei_read,        //                        .read
		input  wire        system_output_bridge_ei_write,       //                        .write
		input  wire [63:0] system_output_bridge_ei_write_data,  //                        .write_data
		output wire        system_output_bridge_ei_acknowledge, //                        .acknowledge
		output wire [63:0] system_output_bridge_ei_read_data    //                        .read_data
	);

	wire         hps_0_h2f_reset_reset;                                                  // hps_0:h2f_rst_n -> [pll_0:rst, rst_controller:reset_in0]
	wire  [63:0] system_output_bridge_avalon_master_readdata;                            // mm_interconnect_0:system_output_bridge_avalon_master_readdata -> system_output_bridge:avalon_readdata
	wire         system_output_bridge_avalon_master_waitrequest;                         // mm_interconnect_0:system_output_bridge_avalon_master_waitrequest -> system_output_bridge:avalon_waitrequest
	wire   [7:0] system_output_bridge_avalon_master_byteenable;                          // system_output_bridge:avalon_byteenable -> mm_interconnect_0:system_output_bridge_avalon_master_byteenable
	wire         system_output_bridge_avalon_master_read;                                // system_output_bridge:avalon_read -> mm_interconnect_0:system_output_bridge_avalon_master_read
	wire  [29:0] system_output_bridge_avalon_master_address;                             // system_output_bridge:avalon_address -> mm_interconnect_0:system_output_bridge_avalon_master_address
	wire         system_output_bridge_avalon_master_write;                               // system_output_bridge:avalon_write -> mm_interconnect_0:system_output_bridge_avalon_master_write
	wire  [63:0] system_output_bridge_avalon_master_writedata;                           // system_output_bridge:avalon_writedata -> mm_interconnect_0:system_output_bridge_avalon_master_writedata
	wire  [63:0] mm_interconnect_0_address_span_extender_0_windowed_slave_readdata;      // address_span_extender_0:avs_s0_readdata -> mm_interconnect_0:address_span_extender_0_windowed_slave_readdata
	wire         mm_interconnect_0_address_span_extender_0_windowed_slave_waitrequest;   // address_span_extender_0:avs_s0_waitrequest -> mm_interconnect_0:address_span_extender_0_windowed_slave_waitrequest
	wire  [26:0] mm_interconnect_0_address_span_extender_0_windowed_slave_address;       // mm_interconnect_0:address_span_extender_0_windowed_slave_address -> address_span_extender_0:avs_s0_address
	wire         mm_interconnect_0_address_span_extender_0_windowed_slave_read;          // mm_interconnect_0:address_span_extender_0_windowed_slave_read -> address_span_extender_0:avs_s0_read
	wire   [7:0] mm_interconnect_0_address_span_extender_0_windowed_slave_byteenable;    // mm_interconnect_0:address_span_extender_0_windowed_slave_byteenable -> address_span_extender_0:avs_s0_byteenable
	wire         mm_interconnect_0_address_span_extender_0_windowed_slave_readdatavalid; // address_span_extender_0:avs_s0_readdatavalid -> mm_interconnect_0:address_span_extender_0_windowed_slave_readdatavalid
	wire         mm_interconnect_0_address_span_extender_0_windowed_slave_write;         // mm_interconnect_0:address_span_extender_0_windowed_slave_write -> address_span_extender_0:avs_s0_write
	wire  [63:0] mm_interconnect_0_address_span_extender_0_windowed_slave_writedata;     // mm_interconnect_0:address_span_extender_0_windowed_slave_writedata -> address_span_extender_0:avs_s0_writedata
	wire   [0:0] mm_interconnect_0_address_span_extender_0_windowed_slave_burstcount;    // mm_interconnect_0:address_span_extender_0_windowed_slave_burstcount -> address_span_extender_0:avs_s0_burstcount
	wire         address_span_extender_0_expanded_master_waitrequest;                    // mm_interconnect_1:address_span_extender_0_expanded_master_waitrequest -> address_span_extender_0:avm_m0_waitrequest
	wire  [63:0] address_span_extender_0_expanded_master_readdata;                       // mm_interconnect_1:address_span_extender_0_expanded_master_readdata -> address_span_extender_0:avm_m0_readdata
	wire  [31:0] address_span_extender_0_expanded_master_address;                        // address_span_extender_0:avm_m0_address -> mm_interconnect_1:address_span_extender_0_expanded_master_address
	wire         address_span_extender_0_expanded_master_read;                           // address_span_extender_0:avm_m0_read -> mm_interconnect_1:address_span_extender_0_expanded_master_read
	wire   [7:0] address_span_extender_0_expanded_master_byteenable;                     // address_span_extender_0:avm_m0_byteenable -> mm_interconnect_1:address_span_extender_0_expanded_master_byteenable
	wire         address_span_extender_0_expanded_master_readdatavalid;                  // mm_interconnect_1:address_span_extender_0_expanded_master_readdatavalid -> address_span_extender_0:avm_m0_readdatavalid
	wire         address_span_extender_0_expanded_master_write;                          // address_span_extender_0:avm_m0_write -> mm_interconnect_1:address_span_extender_0_expanded_master_write
	wire  [63:0] address_span_extender_0_expanded_master_writedata;                      // address_span_extender_0:avm_m0_writedata -> mm_interconnect_1:address_span_extender_0_expanded_master_writedata
	wire   [0:0] address_span_extender_0_expanded_master_burstcount;                     // address_span_extender_0:avm_m0_burstcount -> mm_interconnect_1:address_span_extender_0_expanded_master_burstcount
	wire   [1:0] mm_interconnect_1_hps_0_f2h_axi_slave_awburst;                          // mm_interconnect_1:hps_0_f2h_axi_slave_awburst -> hps_0:f2h_AWBURST
	wire   [4:0] mm_interconnect_1_hps_0_f2h_axi_slave_awuser;                           // mm_interconnect_1:hps_0_f2h_axi_slave_awuser -> hps_0:f2h_AWUSER
	wire   [3:0] mm_interconnect_1_hps_0_f2h_axi_slave_arlen;                            // mm_interconnect_1:hps_0_f2h_axi_slave_arlen -> hps_0:f2h_ARLEN
	wire   [7:0] mm_interconnect_1_hps_0_f2h_axi_slave_wstrb;                            // mm_interconnect_1:hps_0_f2h_axi_slave_wstrb -> hps_0:f2h_WSTRB
	wire         mm_interconnect_1_hps_0_f2h_axi_slave_wready;                           // hps_0:f2h_WREADY -> mm_interconnect_1:hps_0_f2h_axi_slave_wready
	wire   [7:0] mm_interconnect_1_hps_0_f2h_axi_slave_rid;                              // hps_0:f2h_RID -> mm_interconnect_1:hps_0_f2h_axi_slave_rid
	wire         mm_interconnect_1_hps_0_f2h_axi_slave_rready;                           // mm_interconnect_1:hps_0_f2h_axi_slave_rready -> hps_0:f2h_RREADY
	wire   [3:0] mm_interconnect_1_hps_0_f2h_axi_slave_awlen;                            // mm_interconnect_1:hps_0_f2h_axi_slave_awlen -> hps_0:f2h_AWLEN
	wire   [7:0] mm_interconnect_1_hps_0_f2h_axi_slave_wid;                              // mm_interconnect_1:hps_0_f2h_axi_slave_wid -> hps_0:f2h_WID
	wire   [3:0] mm_interconnect_1_hps_0_f2h_axi_slave_arcache;                          // mm_interconnect_1:hps_0_f2h_axi_slave_arcache -> hps_0:f2h_ARCACHE
	wire         mm_interconnect_1_hps_0_f2h_axi_slave_wvalid;                           // mm_interconnect_1:hps_0_f2h_axi_slave_wvalid -> hps_0:f2h_WVALID
	wire  [31:0] mm_interconnect_1_hps_0_f2h_axi_slave_araddr;                           // mm_interconnect_1:hps_0_f2h_axi_slave_araddr -> hps_0:f2h_ARADDR
	wire   [2:0] mm_interconnect_1_hps_0_f2h_axi_slave_arprot;                           // mm_interconnect_1:hps_0_f2h_axi_slave_arprot -> hps_0:f2h_ARPROT
	wire   [2:0] mm_interconnect_1_hps_0_f2h_axi_slave_awprot;                           // mm_interconnect_1:hps_0_f2h_axi_slave_awprot -> hps_0:f2h_AWPROT
	wire  [63:0] mm_interconnect_1_hps_0_f2h_axi_slave_wdata;                            // mm_interconnect_1:hps_0_f2h_axi_slave_wdata -> hps_0:f2h_WDATA
	wire         mm_interconnect_1_hps_0_f2h_axi_slave_arvalid;                          // mm_interconnect_1:hps_0_f2h_axi_slave_arvalid -> hps_0:f2h_ARVALID
	wire   [3:0] mm_interconnect_1_hps_0_f2h_axi_slave_awcache;                          // mm_interconnect_1:hps_0_f2h_axi_slave_awcache -> hps_0:f2h_AWCACHE
	wire   [7:0] mm_interconnect_1_hps_0_f2h_axi_slave_arid;                             // mm_interconnect_1:hps_0_f2h_axi_slave_arid -> hps_0:f2h_ARID
	wire   [1:0] mm_interconnect_1_hps_0_f2h_axi_slave_arlock;                           // mm_interconnect_1:hps_0_f2h_axi_slave_arlock -> hps_0:f2h_ARLOCK
	wire   [1:0] mm_interconnect_1_hps_0_f2h_axi_slave_awlock;                           // mm_interconnect_1:hps_0_f2h_axi_slave_awlock -> hps_0:f2h_AWLOCK
	wire  [31:0] mm_interconnect_1_hps_0_f2h_axi_slave_awaddr;                           // mm_interconnect_1:hps_0_f2h_axi_slave_awaddr -> hps_0:f2h_AWADDR
	wire   [1:0] mm_interconnect_1_hps_0_f2h_axi_slave_bresp;                            // hps_0:f2h_BRESP -> mm_interconnect_1:hps_0_f2h_axi_slave_bresp
	wire         mm_interconnect_1_hps_0_f2h_axi_slave_arready;                          // hps_0:f2h_ARREADY -> mm_interconnect_1:hps_0_f2h_axi_slave_arready
	wire  [63:0] mm_interconnect_1_hps_0_f2h_axi_slave_rdata;                            // hps_0:f2h_RDATA -> mm_interconnect_1:hps_0_f2h_axi_slave_rdata
	wire         mm_interconnect_1_hps_0_f2h_axi_slave_awready;                          // hps_0:f2h_AWREADY -> mm_interconnect_1:hps_0_f2h_axi_slave_awready
	wire   [1:0] mm_interconnect_1_hps_0_f2h_axi_slave_arburst;                          // mm_interconnect_1:hps_0_f2h_axi_slave_arburst -> hps_0:f2h_ARBURST
	wire   [2:0] mm_interconnect_1_hps_0_f2h_axi_slave_arsize;                           // mm_interconnect_1:hps_0_f2h_axi_slave_arsize -> hps_0:f2h_ARSIZE
	wire         mm_interconnect_1_hps_0_f2h_axi_slave_bready;                           // mm_interconnect_1:hps_0_f2h_axi_slave_bready -> hps_0:f2h_BREADY
	wire         mm_interconnect_1_hps_0_f2h_axi_slave_rlast;                            // hps_0:f2h_RLAST -> mm_interconnect_1:hps_0_f2h_axi_slave_rlast
	wire         mm_interconnect_1_hps_0_f2h_axi_slave_wlast;                            // mm_interconnect_1:hps_0_f2h_axi_slave_wlast -> hps_0:f2h_WLAST
	wire   [1:0] mm_interconnect_1_hps_0_f2h_axi_slave_rresp;                            // hps_0:f2h_RRESP -> mm_interconnect_1:hps_0_f2h_axi_slave_rresp
	wire   [7:0] mm_interconnect_1_hps_0_f2h_axi_slave_awid;                             // mm_interconnect_1:hps_0_f2h_axi_slave_awid -> hps_0:f2h_AWID
	wire   [7:0] mm_interconnect_1_hps_0_f2h_axi_slave_bid;                              // hps_0:f2h_BID -> mm_interconnect_1:hps_0_f2h_axi_slave_bid
	wire         mm_interconnect_1_hps_0_f2h_axi_slave_bvalid;                           // hps_0:f2h_BVALID -> mm_interconnect_1:hps_0_f2h_axi_slave_bvalid
	wire   [2:0] mm_interconnect_1_hps_0_f2h_axi_slave_awsize;                           // mm_interconnect_1:hps_0_f2h_axi_slave_awsize -> hps_0:f2h_AWSIZE
	wire         mm_interconnect_1_hps_0_f2h_axi_slave_awvalid;                          // mm_interconnect_1:hps_0_f2h_axi_slave_awvalid -> hps_0:f2h_AWVALID
	wire   [4:0] mm_interconnect_1_hps_0_f2h_axi_slave_aruser;                           // mm_interconnect_1:hps_0_f2h_axi_slave_aruser -> hps_0:f2h_ARUSER
	wire         mm_interconnect_1_hps_0_f2h_axi_slave_rvalid;                           // hps_0:f2h_RVALID -> mm_interconnect_1:hps_0_f2h_axi_slave_rvalid
	wire   [1:0] hps_0_h2f_axi_master_awburst;                                           // hps_0:h2f_AWBURST -> mm_interconnect_2:hps_0_h2f_axi_master_awburst
	wire   [3:0] hps_0_h2f_axi_master_arlen;                                             // hps_0:h2f_ARLEN -> mm_interconnect_2:hps_0_h2f_axi_master_arlen
	wire   [3:0] hps_0_h2f_axi_master_wstrb;                                             // hps_0:h2f_WSTRB -> mm_interconnect_2:hps_0_h2f_axi_master_wstrb
	wire         hps_0_h2f_axi_master_wready;                                            // mm_interconnect_2:hps_0_h2f_axi_master_wready -> hps_0:h2f_WREADY
	wire  [11:0] hps_0_h2f_axi_master_rid;                                               // mm_interconnect_2:hps_0_h2f_axi_master_rid -> hps_0:h2f_RID
	wire         hps_0_h2f_axi_master_rready;                                            // hps_0:h2f_RREADY -> mm_interconnect_2:hps_0_h2f_axi_master_rready
	wire   [3:0] hps_0_h2f_axi_master_awlen;                                             // hps_0:h2f_AWLEN -> mm_interconnect_2:hps_0_h2f_axi_master_awlen
	wire  [11:0] hps_0_h2f_axi_master_wid;                                               // hps_0:h2f_WID -> mm_interconnect_2:hps_0_h2f_axi_master_wid
	wire   [3:0] hps_0_h2f_axi_master_arcache;                                           // hps_0:h2f_ARCACHE -> mm_interconnect_2:hps_0_h2f_axi_master_arcache
	wire         hps_0_h2f_axi_master_wvalid;                                            // hps_0:h2f_WVALID -> mm_interconnect_2:hps_0_h2f_axi_master_wvalid
	wire  [29:0] hps_0_h2f_axi_master_araddr;                                            // hps_0:h2f_ARADDR -> mm_interconnect_2:hps_0_h2f_axi_master_araddr
	wire   [2:0] hps_0_h2f_axi_master_arprot;                                            // hps_0:h2f_ARPROT -> mm_interconnect_2:hps_0_h2f_axi_master_arprot
	wire   [2:0] hps_0_h2f_axi_master_awprot;                                            // hps_0:h2f_AWPROT -> mm_interconnect_2:hps_0_h2f_axi_master_awprot
	wire  [31:0] hps_0_h2f_axi_master_wdata;                                             // hps_0:h2f_WDATA -> mm_interconnect_2:hps_0_h2f_axi_master_wdata
	wire         hps_0_h2f_axi_master_arvalid;                                           // hps_0:h2f_ARVALID -> mm_interconnect_2:hps_0_h2f_axi_master_arvalid
	wire   [3:0] hps_0_h2f_axi_master_awcache;                                           // hps_0:h2f_AWCACHE -> mm_interconnect_2:hps_0_h2f_axi_master_awcache
	wire  [11:0] hps_0_h2f_axi_master_arid;                                              // hps_0:h2f_ARID -> mm_interconnect_2:hps_0_h2f_axi_master_arid
	wire   [1:0] hps_0_h2f_axi_master_arlock;                                            // hps_0:h2f_ARLOCK -> mm_interconnect_2:hps_0_h2f_axi_master_arlock
	wire   [1:0] hps_0_h2f_axi_master_awlock;                                            // hps_0:h2f_AWLOCK -> mm_interconnect_2:hps_0_h2f_axi_master_awlock
	wire  [29:0] hps_0_h2f_axi_master_awaddr;                                            // hps_0:h2f_AWADDR -> mm_interconnect_2:hps_0_h2f_axi_master_awaddr
	wire   [1:0] hps_0_h2f_axi_master_bresp;                                             // mm_interconnect_2:hps_0_h2f_axi_master_bresp -> hps_0:h2f_BRESP
	wire         hps_0_h2f_axi_master_arready;                                           // mm_interconnect_2:hps_0_h2f_axi_master_arready -> hps_0:h2f_ARREADY
	wire  [31:0] hps_0_h2f_axi_master_rdata;                                             // mm_interconnect_2:hps_0_h2f_axi_master_rdata -> hps_0:h2f_RDATA
	wire         hps_0_h2f_axi_master_awready;                                           // mm_interconnect_2:hps_0_h2f_axi_master_awready -> hps_0:h2f_AWREADY
	wire   [1:0] hps_0_h2f_axi_master_arburst;                                           // hps_0:h2f_ARBURST -> mm_interconnect_2:hps_0_h2f_axi_master_arburst
	wire   [2:0] hps_0_h2f_axi_master_arsize;                                            // hps_0:h2f_ARSIZE -> mm_interconnect_2:hps_0_h2f_axi_master_arsize
	wire         hps_0_h2f_axi_master_bready;                                            // hps_0:h2f_BREADY -> mm_interconnect_2:hps_0_h2f_axi_master_bready
	wire         hps_0_h2f_axi_master_rlast;                                             // mm_interconnect_2:hps_0_h2f_axi_master_rlast -> hps_0:h2f_RLAST
	wire         hps_0_h2f_axi_master_wlast;                                             // hps_0:h2f_WLAST -> mm_interconnect_2:hps_0_h2f_axi_master_wlast
	wire   [1:0] hps_0_h2f_axi_master_rresp;                                             // mm_interconnect_2:hps_0_h2f_axi_master_rresp -> hps_0:h2f_RRESP
	wire  [11:0] hps_0_h2f_axi_master_awid;                                              // hps_0:h2f_AWID -> mm_interconnect_2:hps_0_h2f_axi_master_awid
	wire  [11:0] hps_0_h2f_axi_master_bid;                                               // mm_interconnect_2:hps_0_h2f_axi_master_bid -> hps_0:h2f_BID
	wire         hps_0_h2f_axi_master_bvalid;                                            // mm_interconnect_2:hps_0_h2f_axi_master_bvalid -> hps_0:h2f_BVALID
	wire   [2:0] hps_0_h2f_axi_master_awsize;                                            // hps_0:h2f_AWSIZE -> mm_interconnect_2:hps_0_h2f_axi_master_awsize
	wire         hps_0_h2f_axi_master_awvalid;                                           // hps_0:h2f_AWVALID -> mm_interconnect_2:hps_0_h2f_axi_master_awvalid
	wire         hps_0_h2f_axi_master_rvalid;                                            // mm_interconnect_2:hps_0_h2f_axi_master_rvalid -> hps_0:h2f_RVALID
	wire         mm_interconnect_2_system_input_bridge_avalon_slave_chipselect;          // mm_interconnect_2:system_input_bridge_avalon_slave_chipselect -> system_input_bridge:avalon_chipselect
	wire  [31:0] mm_interconnect_2_system_input_bridge_avalon_slave_readdata;            // system_input_bridge:avalon_readdata -> mm_interconnect_2:system_input_bridge_avalon_slave_readdata
	wire         mm_interconnect_2_system_input_bridge_avalon_slave_waitrequest;         // system_input_bridge:avalon_waitrequest -> mm_interconnect_2:system_input_bridge_avalon_slave_waitrequest
	wire   [3:0] mm_interconnect_2_system_input_bridge_avalon_slave_address;             // mm_interconnect_2:system_input_bridge_avalon_slave_address -> system_input_bridge:avalon_address
	wire         mm_interconnect_2_system_input_bridge_avalon_slave_read;                // mm_interconnect_2:system_input_bridge_avalon_slave_read -> system_input_bridge:avalon_read
	wire   [3:0] mm_interconnect_2_system_input_bridge_avalon_slave_byteenable;          // mm_interconnect_2:system_input_bridge_avalon_slave_byteenable -> system_input_bridge:avalon_byteenable
	wire         mm_interconnect_2_system_input_bridge_avalon_slave_write;               // mm_interconnect_2:system_input_bridge_avalon_slave_write -> system_input_bridge:avalon_write
	wire  [31:0] mm_interconnect_2_system_input_bridge_avalon_slave_writedata;           // mm_interconnect_2:system_input_bridge_avalon_slave_writedata -> system_input_bridge:avalon_writedata
	wire   [1:0] hps_0_h2f_lw_axi_master_awburst;                                        // hps_0:h2f_lw_AWBURST -> mm_interconnect_3:hps_0_h2f_lw_axi_master_awburst
	wire   [3:0] hps_0_h2f_lw_axi_master_arlen;                                          // hps_0:h2f_lw_ARLEN -> mm_interconnect_3:hps_0_h2f_lw_axi_master_arlen
	wire   [3:0] hps_0_h2f_lw_axi_master_wstrb;                                          // hps_0:h2f_lw_WSTRB -> mm_interconnect_3:hps_0_h2f_lw_axi_master_wstrb
	wire         hps_0_h2f_lw_axi_master_wready;                                         // mm_interconnect_3:hps_0_h2f_lw_axi_master_wready -> hps_0:h2f_lw_WREADY
	wire  [11:0] hps_0_h2f_lw_axi_master_rid;                                            // mm_interconnect_3:hps_0_h2f_lw_axi_master_rid -> hps_0:h2f_lw_RID
	wire         hps_0_h2f_lw_axi_master_rready;                                         // hps_0:h2f_lw_RREADY -> mm_interconnect_3:hps_0_h2f_lw_axi_master_rready
	wire   [3:0] hps_0_h2f_lw_axi_master_awlen;                                          // hps_0:h2f_lw_AWLEN -> mm_interconnect_3:hps_0_h2f_lw_axi_master_awlen
	wire  [11:0] hps_0_h2f_lw_axi_master_wid;                                            // hps_0:h2f_lw_WID -> mm_interconnect_3:hps_0_h2f_lw_axi_master_wid
	wire   [3:0] hps_0_h2f_lw_axi_master_arcache;                                        // hps_0:h2f_lw_ARCACHE -> mm_interconnect_3:hps_0_h2f_lw_axi_master_arcache
	wire         hps_0_h2f_lw_axi_master_wvalid;                                         // hps_0:h2f_lw_WVALID -> mm_interconnect_3:hps_0_h2f_lw_axi_master_wvalid
	wire  [20:0] hps_0_h2f_lw_axi_master_araddr;                                         // hps_0:h2f_lw_ARADDR -> mm_interconnect_3:hps_0_h2f_lw_axi_master_araddr
	wire   [2:0] hps_0_h2f_lw_axi_master_arprot;                                         // hps_0:h2f_lw_ARPROT -> mm_interconnect_3:hps_0_h2f_lw_axi_master_arprot
	wire   [2:0] hps_0_h2f_lw_axi_master_awprot;                                         // hps_0:h2f_lw_AWPROT -> mm_interconnect_3:hps_0_h2f_lw_axi_master_awprot
	wire  [31:0] hps_0_h2f_lw_axi_master_wdata;                                          // hps_0:h2f_lw_WDATA -> mm_interconnect_3:hps_0_h2f_lw_axi_master_wdata
	wire         hps_0_h2f_lw_axi_master_arvalid;                                        // hps_0:h2f_lw_ARVALID -> mm_interconnect_3:hps_0_h2f_lw_axi_master_arvalid
	wire   [3:0] hps_0_h2f_lw_axi_master_awcache;                                        // hps_0:h2f_lw_AWCACHE -> mm_interconnect_3:hps_0_h2f_lw_axi_master_awcache
	wire  [11:0] hps_0_h2f_lw_axi_master_arid;                                           // hps_0:h2f_lw_ARID -> mm_interconnect_3:hps_0_h2f_lw_axi_master_arid
	wire   [1:0] hps_0_h2f_lw_axi_master_arlock;                                         // hps_0:h2f_lw_ARLOCK -> mm_interconnect_3:hps_0_h2f_lw_axi_master_arlock
	wire   [1:0] hps_0_h2f_lw_axi_master_awlock;                                         // hps_0:h2f_lw_AWLOCK -> mm_interconnect_3:hps_0_h2f_lw_axi_master_awlock
	wire  [20:0] hps_0_h2f_lw_axi_master_awaddr;                                         // hps_0:h2f_lw_AWADDR -> mm_interconnect_3:hps_0_h2f_lw_axi_master_awaddr
	wire   [1:0] hps_0_h2f_lw_axi_master_bresp;                                          // mm_interconnect_3:hps_0_h2f_lw_axi_master_bresp -> hps_0:h2f_lw_BRESP
	wire         hps_0_h2f_lw_axi_master_arready;                                        // mm_interconnect_3:hps_0_h2f_lw_axi_master_arready -> hps_0:h2f_lw_ARREADY
	wire  [31:0] hps_0_h2f_lw_axi_master_rdata;                                          // mm_interconnect_3:hps_0_h2f_lw_axi_master_rdata -> hps_0:h2f_lw_RDATA
	wire         hps_0_h2f_lw_axi_master_awready;                                        // mm_interconnect_3:hps_0_h2f_lw_axi_master_awready -> hps_0:h2f_lw_AWREADY
	wire   [1:0] hps_0_h2f_lw_axi_master_arburst;                                        // hps_0:h2f_lw_ARBURST -> mm_interconnect_3:hps_0_h2f_lw_axi_master_arburst
	wire   [2:0] hps_0_h2f_lw_axi_master_arsize;                                         // hps_0:h2f_lw_ARSIZE -> mm_interconnect_3:hps_0_h2f_lw_axi_master_arsize
	wire         hps_0_h2f_lw_axi_master_bready;                                         // hps_0:h2f_lw_BREADY -> mm_interconnect_3:hps_0_h2f_lw_axi_master_bready
	wire         hps_0_h2f_lw_axi_master_rlast;                                          // mm_interconnect_3:hps_0_h2f_lw_axi_master_rlast -> hps_0:h2f_lw_RLAST
	wire         hps_0_h2f_lw_axi_master_wlast;                                          // hps_0:h2f_lw_WLAST -> mm_interconnect_3:hps_0_h2f_lw_axi_master_wlast
	wire   [1:0] hps_0_h2f_lw_axi_master_rresp;                                          // mm_interconnect_3:hps_0_h2f_lw_axi_master_rresp -> hps_0:h2f_lw_RRESP
	wire  [11:0] hps_0_h2f_lw_axi_master_awid;                                           // hps_0:h2f_lw_AWID -> mm_interconnect_3:hps_0_h2f_lw_axi_master_awid
	wire  [11:0] hps_0_h2f_lw_axi_master_bid;                                            // mm_interconnect_3:hps_0_h2f_lw_axi_master_bid -> hps_0:h2f_lw_BID
	wire         hps_0_h2f_lw_axi_master_bvalid;                                         // mm_interconnect_3:hps_0_h2f_lw_axi_master_bvalid -> hps_0:h2f_lw_BVALID
	wire   [2:0] hps_0_h2f_lw_axi_master_awsize;                                         // hps_0:h2f_lw_AWSIZE -> mm_interconnect_3:hps_0_h2f_lw_axi_master_awsize
	wire         hps_0_h2f_lw_axi_master_awvalid;                                        // hps_0:h2f_lw_AWVALID -> mm_interconnect_3:hps_0_h2f_lw_axi_master_awvalid
	wire         hps_0_h2f_lw_axi_master_rvalid;                                         // mm_interconnect_3:hps_0_h2f_lw_axi_master_rvalid -> hps_0:h2f_lw_RVALID
	wire         mm_interconnect_3_hps_register_s1_chipselect;                           // mm_interconnect_3:hps_register_s1_chipselect -> hps_register:chipselect
	wire  [31:0] mm_interconnect_3_hps_register_s1_readdata;                             // hps_register:readdata -> mm_interconnect_3:hps_register_s1_readdata
	wire   [1:0] mm_interconnect_3_hps_register_s1_address;                              // mm_interconnect_3:hps_register_s1_address -> hps_register:address
	wire         mm_interconnect_3_hps_register_s1_write;                                // mm_interconnect_3:hps_register_s1_write -> hps_register:write_n
	wire  [31:0] mm_interconnect_3_hps_register_s1_writedata;                            // mm_interconnect_3:hps_register_s1_writedata -> hps_register:writedata
	wire  [31:0] mm_interconnect_3_fpga_register_s1_readdata;                            // fpga_register:readdata -> mm_interconnect_3:fpga_register_s1_readdata
	wire   [1:0] mm_interconnect_3_fpga_register_s1_address;                             // mm_interconnect_3:fpga_register_s1_address -> fpga_register:address
	wire         rst_controller_reset_out_reset;                                         // rst_controller:reset_out -> [address_span_extender_0:reset, fpga_register:reset_n, hps_register:reset_n, mm_interconnect_0:system_output_bridge_reset_reset_bridge_in_reset_reset, mm_interconnect_1:address_span_extender_0_reset_reset_bridge_in_reset_reset, mm_interconnect_2:system_input_bridge_reset_reset_bridge_in_reset_reset, mm_interconnect_3:hps_register_reset_reset_bridge_in_reset_reset, system_input_bridge:reset, system_output_bridge:reset]

	altera_address_span_extender #(
		.DATA_WIDTH           (64),
		.BYTEENABLE_WIDTH     (8),
		.MASTER_ADDRESS_WIDTH (32),
		.SLAVE_ADDRESS_WIDTH  (27),
		.SLAVE_ADDRESS_SHIFT  (3),
		.BURSTCOUNT_WIDTH     (1),
		.CNTL_ADDRESS_WIDTH   (1),
		.SUB_WINDOW_COUNT     (1),
		.MASTER_ADDRESS_DEF   (64'b0000000000000000000000000000000000000000000000000000000000000000)
	) address_span_extender_0 (
		.clk                  (clk_clk),                                                                //           clock.clk
		.reset                (rst_controller_reset_out_reset),                                         //           reset.reset
		.avs_s0_address       (mm_interconnect_0_address_span_extender_0_windowed_slave_address),       //  windowed_slave.address
		.avs_s0_read          (mm_interconnect_0_address_span_extender_0_windowed_slave_read),          //                .read
		.avs_s0_readdata      (mm_interconnect_0_address_span_extender_0_windowed_slave_readdata),      //                .readdata
		.avs_s0_write         (mm_interconnect_0_address_span_extender_0_windowed_slave_write),         //                .write
		.avs_s0_writedata     (mm_interconnect_0_address_span_extender_0_windowed_slave_writedata),     //                .writedata
		.avs_s0_readdatavalid (mm_interconnect_0_address_span_extender_0_windowed_slave_readdatavalid), //                .readdatavalid
		.avs_s0_waitrequest   (mm_interconnect_0_address_span_extender_0_windowed_slave_waitrequest),   //                .waitrequest
		.avs_s0_byteenable    (mm_interconnect_0_address_span_extender_0_windowed_slave_byteenable),    //                .byteenable
		.avs_s0_burstcount    (mm_interconnect_0_address_span_extender_0_windowed_slave_burstcount),    //                .burstcount
		.avm_m0_address       (address_span_extender_0_expanded_master_address),                        // expanded_master.address
		.avm_m0_read          (address_span_extender_0_expanded_master_read),                           //                .read
		.avm_m0_waitrequest   (address_span_extender_0_expanded_master_waitrequest),                    //                .waitrequest
		.avm_m0_readdata      (address_span_extender_0_expanded_master_readdata),                       //                .readdata
		.avm_m0_write         (address_span_extender_0_expanded_master_write),                          //                .write
		.avm_m0_writedata     (address_span_extender_0_expanded_master_writedata),                      //                .writedata
		.avm_m0_readdatavalid (address_span_extender_0_expanded_master_readdatavalid),                  //                .readdatavalid
		.avm_m0_byteenable    (address_span_extender_0_expanded_master_byteenable),                     //                .byteenable
		.avm_m0_burstcount    (address_span_extender_0_expanded_master_burstcount),                     //                .burstcount
		.avs_cntl_read        (),                                                                       //            cntl.read
		.avs_cntl_readdata    (),                                                                       //                .readdata
		.avs_cntl_write       (),                                                                       //                .write
		.avs_cntl_writedata   (),                                                                       //                .writedata
		.avs_cntl_byteenable  (),                                                                       //                .byteenable
		.avs_cntl_address     (1'b0)                                                                    //     (terminated)
	);

	aesa_radar_hps_fpga_register fpga_register (
		.clk      (clk_clk),                                     //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),             //               reset.reset_n
		.address  (mm_interconnect_3_fpga_register_s1_address),  //                  s1.address
		.readdata (mm_interconnect_3_fpga_register_s1_readdata), //                    .readdata
		.in_port  (fpga_state_reg_export)                        // external_connection.export
	);

	aesa_radar_hps_hps_0 #(
		.F2S_Width (2),
		.S2F_Width (1)
	) hps_0 (
		.mem_a                    (memory_mem_a),                                  //            memory.mem_a
		.mem_ba                   (memory_mem_ba),                                 //                  .mem_ba
		.mem_ck                   (memory_mem_ck),                                 //                  .mem_ck
		.mem_ck_n                 (memory_mem_ck_n),                               //                  .mem_ck_n
		.mem_cke                  (memory_mem_cke),                                //                  .mem_cke
		.mem_cs_n                 (memory_mem_cs_n),                               //                  .mem_cs_n
		.mem_ras_n                (memory_mem_ras_n),                              //                  .mem_ras_n
		.mem_cas_n                (memory_mem_cas_n),                              //                  .mem_cas_n
		.mem_we_n                 (memory_mem_we_n),                               //                  .mem_we_n
		.mem_reset_n              (memory_mem_reset_n),                            //                  .mem_reset_n
		.mem_dq                   (memory_mem_dq),                                 //                  .mem_dq
		.mem_dqs                  (memory_mem_dqs),                                //                  .mem_dqs
		.mem_dqs_n                (memory_mem_dqs_n),                              //                  .mem_dqs_n
		.mem_odt                  (memory_mem_odt),                                //                  .mem_odt
		.mem_dm                   (memory_mem_dm),                                 //                  .mem_dm
		.oct_rzqin                (memory_oct_rzqin),                              //                  .oct_rzqin
		.hps_io_emac1_inst_TX_CLK (hps_io_hps_io_emac1_inst_TX_CLK),               //            hps_io.hps_io_emac1_inst_TX_CLK
		.hps_io_emac1_inst_TXD0   (hps_io_hps_io_emac1_inst_TXD0),                 //                  .hps_io_emac1_inst_TXD0
		.hps_io_emac1_inst_TXD1   (hps_io_hps_io_emac1_inst_TXD1),                 //                  .hps_io_emac1_inst_TXD1
		.hps_io_emac1_inst_TXD2   (hps_io_hps_io_emac1_inst_TXD2),                 //                  .hps_io_emac1_inst_TXD2
		.hps_io_emac1_inst_TXD3   (hps_io_hps_io_emac1_inst_TXD3),                 //                  .hps_io_emac1_inst_TXD3
		.hps_io_emac1_inst_RXD0   (hps_io_hps_io_emac1_inst_RXD0),                 //                  .hps_io_emac1_inst_RXD0
		.hps_io_emac1_inst_MDIO   (hps_io_hps_io_emac1_inst_MDIO),                 //                  .hps_io_emac1_inst_MDIO
		.hps_io_emac1_inst_MDC    (hps_io_hps_io_emac1_inst_MDC),                  //                  .hps_io_emac1_inst_MDC
		.hps_io_emac1_inst_RX_CTL (hps_io_hps_io_emac1_inst_RX_CTL),               //                  .hps_io_emac1_inst_RX_CTL
		.hps_io_emac1_inst_TX_CTL (hps_io_hps_io_emac1_inst_TX_CTL),               //                  .hps_io_emac1_inst_TX_CTL
		.hps_io_emac1_inst_RX_CLK (hps_io_hps_io_emac1_inst_RX_CLK),               //                  .hps_io_emac1_inst_RX_CLK
		.hps_io_emac1_inst_RXD1   (hps_io_hps_io_emac1_inst_RXD1),                 //                  .hps_io_emac1_inst_RXD1
		.hps_io_emac1_inst_RXD2   (hps_io_hps_io_emac1_inst_RXD2),                 //                  .hps_io_emac1_inst_RXD2
		.hps_io_emac1_inst_RXD3   (hps_io_hps_io_emac1_inst_RXD3),                 //                  .hps_io_emac1_inst_RXD3
		.hps_io_sdio_inst_CMD     (hps_io_hps_io_sdio_inst_CMD),                   //                  .hps_io_sdio_inst_CMD
		.hps_io_sdio_inst_D0      (hps_io_hps_io_sdio_inst_D0),                    //                  .hps_io_sdio_inst_D0
		.hps_io_sdio_inst_D1      (hps_io_hps_io_sdio_inst_D1),                    //                  .hps_io_sdio_inst_D1
		.hps_io_sdio_inst_CLK     (hps_io_hps_io_sdio_inst_CLK),                   //                  .hps_io_sdio_inst_CLK
		.hps_io_sdio_inst_D2      (hps_io_hps_io_sdio_inst_D2),                    //                  .hps_io_sdio_inst_D2
		.hps_io_sdio_inst_D3      (hps_io_hps_io_sdio_inst_D3),                    //                  .hps_io_sdio_inst_D3
		.hps_io_usb1_inst_D0      (hps_io_hps_io_usb1_inst_D0),                    //                  .hps_io_usb1_inst_D0
		.hps_io_usb1_inst_D1      (hps_io_hps_io_usb1_inst_D1),                    //                  .hps_io_usb1_inst_D1
		.hps_io_usb1_inst_D2      (hps_io_hps_io_usb1_inst_D2),                    //                  .hps_io_usb1_inst_D2
		.hps_io_usb1_inst_D3      (hps_io_hps_io_usb1_inst_D3),                    //                  .hps_io_usb1_inst_D3
		.hps_io_usb1_inst_D4      (hps_io_hps_io_usb1_inst_D4),                    //                  .hps_io_usb1_inst_D4
		.hps_io_usb1_inst_D5      (hps_io_hps_io_usb1_inst_D5),                    //                  .hps_io_usb1_inst_D5
		.hps_io_usb1_inst_D6      (hps_io_hps_io_usb1_inst_D6),                    //                  .hps_io_usb1_inst_D6
		.hps_io_usb1_inst_D7      (hps_io_hps_io_usb1_inst_D7),                    //                  .hps_io_usb1_inst_D7
		.hps_io_usb1_inst_CLK     (hps_io_hps_io_usb1_inst_CLK),                   //                  .hps_io_usb1_inst_CLK
		.hps_io_usb1_inst_STP     (hps_io_hps_io_usb1_inst_STP),                   //                  .hps_io_usb1_inst_STP
		.hps_io_usb1_inst_DIR     (hps_io_hps_io_usb1_inst_DIR),                   //                  .hps_io_usb1_inst_DIR
		.hps_io_usb1_inst_NXT     (hps_io_hps_io_usb1_inst_NXT),                   //                  .hps_io_usb1_inst_NXT
		.hps_io_uart0_inst_RX     (hps_io_hps_io_uart0_inst_RX),                   //                  .hps_io_uart0_inst_RX
		.hps_io_uart0_inst_TX     (hps_io_hps_io_uart0_inst_TX),                   //                  .hps_io_uart0_inst_TX
		.hps_io_gpio_inst_GPIO35  (hps_io_hps_io_gpio_inst_GPIO35),                //                  .hps_io_gpio_inst_GPIO35
		.h2f_rst_n                (hps_0_h2f_reset_reset),                         //         h2f_reset.reset_n
		.h2f_axi_clk              (clk_clk),                                       //     h2f_axi_clock.clk
		.h2f_AWID                 (hps_0_h2f_axi_master_awid),                     //    h2f_axi_master.awid
		.h2f_AWADDR               (hps_0_h2f_axi_master_awaddr),                   //                  .awaddr
		.h2f_AWLEN                (hps_0_h2f_axi_master_awlen),                    //                  .awlen
		.h2f_AWSIZE               (hps_0_h2f_axi_master_awsize),                   //                  .awsize
		.h2f_AWBURST              (hps_0_h2f_axi_master_awburst),                  //                  .awburst
		.h2f_AWLOCK               (hps_0_h2f_axi_master_awlock),                   //                  .awlock
		.h2f_AWCACHE              (hps_0_h2f_axi_master_awcache),                  //                  .awcache
		.h2f_AWPROT               (hps_0_h2f_axi_master_awprot),                   //                  .awprot
		.h2f_AWVALID              (hps_0_h2f_axi_master_awvalid),                  //                  .awvalid
		.h2f_AWREADY              (hps_0_h2f_axi_master_awready),                  //                  .awready
		.h2f_WID                  (hps_0_h2f_axi_master_wid),                      //                  .wid
		.h2f_WDATA                (hps_0_h2f_axi_master_wdata),                    //                  .wdata
		.h2f_WSTRB                (hps_0_h2f_axi_master_wstrb),                    //                  .wstrb
		.h2f_WLAST                (hps_0_h2f_axi_master_wlast),                    //                  .wlast
		.h2f_WVALID               (hps_0_h2f_axi_master_wvalid),                   //                  .wvalid
		.h2f_WREADY               (hps_0_h2f_axi_master_wready),                   //                  .wready
		.h2f_BID                  (hps_0_h2f_axi_master_bid),                      //                  .bid
		.h2f_BRESP                (hps_0_h2f_axi_master_bresp),                    //                  .bresp
		.h2f_BVALID               (hps_0_h2f_axi_master_bvalid),                   //                  .bvalid
		.h2f_BREADY               (hps_0_h2f_axi_master_bready),                   //                  .bready
		.h2f_ARID                 (hps_0_h2f_axi_master_arid),                     //                  .arid
		.h2f_ARADDR               (hps_0_h2f_axi_master_araddr),                   //                  .araddr
		.h2f_ARLEN                (hps_0_h2f_axi_master_arlen),                    //                  .arlen
		.h2f_ARSIZE               (hps_0_h2f_axi_master_arsize),                   //                  .arsize
		.h2f_ARBURST              (hps_0_h2f_axi_master_arburst),                  //                  .arburst
		.h2f_ARLOCK               (hps_0_h2f_axi_master_arlock),                   //                  .arlock
		.h2f_ARCACHE              (hps_0_h2f_axi_master_arcache),                  //                  .arcache
		.h2f_ARPROT               (hps_0_h2f_axi_master_arprot),                   //                  .arprot
		.h2f_ARVALID              (hps_0_h2f_axi_master_arvalid),                  //                  .arvalid
		.h2f_ARREADY              (hps_0_h2f_axi_master_arready),                  //                  .arready
		.h2f_RID                  (hps_0_h2f_axi_master_rid),                      //                  .rid
		.h2f_RDATA                (hps_0_h2f_axi_master_rdata),                    //                  .rdata
		.h2f_RRESP                (hps_0_h2f_axi_master_rresp),                    //                  .rresp
		.h2f_RLAST                (hps_0_h2f_axi_master_rlast),                    //                  .rlast
		.h2f_RVALID               (hps_0_h2f_axi_master_rvalid),                   //                  .rvalid
		.h2f_RREADY               (hps_0_h2f_axi_master_rready),                   //                  .rready
		.f2h_axi_clk              (clk_clk),                                       //     f2h_axi_clock.clk
		.f2h_AWID                 (mm_interconnect_1_hps_0_f2h_axi_slave_awid),    //     f2h_axi_slave.awid
		.f2h_AWADDR               (mm_interconnect_1_hps_0_f2h_axi_slave_awaddr),  //                  .awaddr
		.f2h_AWLEN                (mm_interconnect_1_hps_0_f2h_axi_slave_awlen),   //                  .awlen
		.f2h_AWSIZE               (mm_interconnect_1_hps_0_f2h_axi_slave_awsize),  //                  .awsize
		.f2h_AWBURST              (mm_interconnect_1_hps_0_f2h_axi_slave_awburst), //                  .awburst
		.f2h_AWLOCK               (mm_interconnect_1_hps_0_f2h_axi_slave_awlock),  //                  .awlock
		.f2h_AWCACHE              (mm_interconnect_1_hps_0_f2h_axi_slave_awcache), //                  .awcache
		.f2h_AWPROT               (mm_interconnect_1_hps_0_f2h_axi_slave_awprot),  //                  .awprot
		.f2h_AWVALID              (mm_interconnect_1_hps_0_f2h_axi_slave_awvalid), //                  .awvalid
		.f2h_AWREADY              (mm_interconnect_1_hps_0_f2h_axi_slave_awready), //                  .awready
		.f2h_AWUSER               (mm_interconnect_1_hps_0_f2h_axi_slave_awuser),  //                  .awuser
		.f2h_WID                  (mm_interconnect_1_hps_0_f2h_axi_slave_wid),     //                  .wid
		.f2h_WDATA                (mm_interconnect_1_hps_0_f2h_axi_slave_wdata),   //                  .wdata
		.f2h_WSTRB                (mm_interconnect_1_hps_0_f2h_axi_slave_wstrb),   //                  .wstrb
		.f2h_WLAST                (mm_interconnect_1_hps_0_f2h_axi_slave_wlast),   //                  .wlast
		.f2h_WVALID               (mm_interconnect_1_hps_0_f2h_axi_slave_wvalid),  //                  .wvalid
		.f2h_WREADY               (mm_interconnect_1_hps_0_f2h_axi_slave_wready),  //                  .wready
		.f2h_BID                  (mm_interconnect_1_hps_0_f2h_axi_slave_bid),     //                  .bid
		.f2h_BRESP                (mm_interconnect_1_hps_0_f2h_axi_slave_bresp),   //                  .bresp
		.f2h_BVALID               (mm_interconnect_1_hps_0_f2h_axi_slave_bvalid),  //                  .bvalid
		.f2h_BREADY               (mm_interconnect_1_hps_0_f2h_axi_slave_bready),  //                  .bready
		.f2h_ARID                 (mm_interconnect_1_hps_0_f2h_axi_slave_arid),    //                  .arid
		.f2h_ARADDR               (mm_interconnect_1_hps_0_f2h_axi_slave_araddr),  //                  .araddr
		.f2h_ARLEN                (mm_interconnect_1_hps_0_f2h_axi_slave_arlen),   //                  .arlen
		.f2h_ARSIZE               (mm_interconnect_1_hps_0_f2h_axi_slave_arsize),  //                  .arsize
		.f2h_ARBURST              (mm_interconnect_1_hps_0_f2h_axi_slave_arburst), //                  .arburst
		.f2h_ARLOCK               (mm_interconnect_1_hps_0_f2h_axi_slave_arlock),  //                  .arlock
		.f2h_ARCACHE              (mm_interconnect_1_hps_0_f2h_axi_slave_arcache), //                  .arcache
		.f2h_ARPROT               (mm_interconnect_1_hps_0_f2h_axi_slave_arprot),  //                  .arprot
		.f2h_ARVALID              (mm_interconnect_1_hps_0_f2h_axi_slave_arvalid), //                  .arvalid
		.f2h_ARREADY              (mm_interconnect_1_hps_0_f2h_axi_slave_arready), //                  .arready
		.f2h_ARUSER               (mm_interconnect_1_hps_0_f2h_axi_slave_aruser),  //                  .aruser
		.f2h_RID                  (mm_interconnect_1_hps_0_f2h_axi_slave_rid),     //                  .rid
		.f2h_RDATA                (mm_interconnect_1_hps_0_f2h_axi_slave_rdata),   //                  .rdata
		.f2h_RRESP                (mm_interconnect_1_hps_0_f2h_axi_slave_rresp),   //                  .rresp
		.f2h_RLAST                (mm_interconnect_1_hps_0_f2h_axi_slave_rlast),   //                  .rlast
		.f2h_RVALID               (mm_interconnect_1_hps_0_f2h_axi_slave_rvalid),  //                  .rvalid
		.f2h_RREADY               (mm_interconnect_1_hps_0_f2h_axi_slave_rready),  //                  .rready
		.h2f_lw_axi_clk           (clk_clk),                                       //  h2f_lw_axi_clock.clk
		.h2f_lw_AWID              (hps_0_h2f_lw_axi_master_awid),                  // h2f_lw_axi_master.awid
		.h2f_lw_AWADDR            (hps_0_h2f_lw_axi_master_awaddr),                //                  .awaddr
		.h2f_lw_AWLEN             (hps_0_h2f_lw_axi_master_awlen),                 //                  .awlen
		.h2f_lw_AWSIZE            (hps_0_h2f_lw_axi_master_awsize),                //                  .awsize
		.h2f_lw_AWBURST           (hps_0_h2f_lw_axi_master_awburst),               //                  .awburst
		.h2f_lw_AWLOCK            (hps_0_h2f_lw_axi_master_awlock),                //                  .awlock
		.h2f_lw_AWCACHE           (hps_0_h2f_lw_axi_master_awcache),               //                  .awcache
		.h2f_lw_AWPROT            (hps_0_h2f_lw_axi_master_awprot),                //                  .awprot
		.h2f_lw_AWVALID           (hps_0_h2f_lw_axi_master_awvalid),               //                  .awvalid
		.h2f_lw_AWREADY           (hps_0_h2f_lw_axi_master_awready),               //                  .awready
		.h2f_lw_WID               (hps_0_h2f_lw_axi_master_wid),                   //                  .wid
		.h2f_lw_WDATA             (hps_0_h2f_lw_axi_master_wdata),                 //                  .wdata
		.h2f_lw_WSTRB             (hps_0_h2f_lw_axi_master_wstrb),                 //                  .wstrb
		.h2f_lw_WLAST             (hps_0_h2f_lw_axi_master_wlast),                 //                  .wlast
		.h2f_lw_WVALID            (hps_0_h2f_lw_axi_master_wvalid),                //                  .wvalid
		.h2f_lw_WREADY            (hps_0_h2f_lw_axi_master_wready),                //                  .wready
		.h2f_lw_BID               (hps_0_h2f_lw_axi_master_bid),                   //                  .bid
		.h2f_lw_BRESP             (hps_0_h2f_lw_axi_master_bresp),                 //                  .bresp
		.h2f_lw_BVALID            (hps_0_h2f_lw_axi_master_bvalid),                //                  .bvalid
		.h2f_lw_BREADY            (hps_0_h2f_lw_axi_master_bready),                //                  .bready
		.h2f_lw_ARID              (hps_0_h2f_lw_axi_master_arid),                  //                  .arid
		.h2f_lw_ARADDR            (hps_0_h2f_lw_axi_master_araddr),                //                  .araddr
		.h2f_lw_ARLEN             (hps_0_h2f_lw_axi_master_arlen),                 //                  .arlen
		.h2f_lw_ARSIZE            (hps_0_h2f_lw_axi_master_arsize),                //                  .arsize
		.h2f_lw_ARBURST           (hps_0_h2f_lw_axi_master_arburst),               //                  .arburst
		.h2f_lw_ARLOCK            (hps_0_h2f_lw_axi_master_arlock),                //                  .arlock
		.h2f_lw_ARCACHE           (hps_0_h2f_lw_axi_master_arcache),               //                  .arcache
		.h2f_lw_ARPROT            (hps_0_h2f_lw_axi_master_arprot),                //                  .arprot
		.h2f_lw_ARVALID           (hps_0_h2f_lw_axi_master_arvalid),               //                  .arvalid
		.h2f_lw_ARREADY           (hps_0_h2f_lw_axi_master_arready),               //                  .arready
		.h2f_lw_RID               (hps_0_h2f_lw_axi_master_rid),                   //                  .rid
		.h2f_lw_RDATA             (hps_0_h2f_lw_axi_master_rdata),                 //                  .rdata
		.h2f_lw_RRESP             (hps_0_h2f_lw_axi_master_rresp),                 //                  .rresp
		.h2f_lw_RLAST             (hps_0_h2f_lw_axi_master_rlast),                 //                  .rlast
		.h2f_lw_RVALID            (hps_0_h2f_lw_axi_master_rvalid),                //                  .rvalid
		.h2f_lw_RREADY            (hps_0_h2f_lw_axi_master_rready)                 //                  .rready
	);

	aesa_radar_hps_hps_register hps_register (
		.clk        (clk_clk),                                      //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),              //               reset.reset_n
		.address    (mm_interconnect_3_hps_register_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_3_hps_register_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_3_hps_register_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_3_hps_register_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_3_hps_register_s1_readdata),   //                    .readdata
		.out_port   (hps_state_reg_export)                          // external_connection.export
	);

	aesa_radar_hps_pll_0 pll_0 (
		.refclk   (clk_clk),                //  refclk.clk
		.rst      (~hps_0_h2f_reset_reset), //   reset.reset
		.outclk_0 (pll_0_outclk0_clk),      // outclk0.clk
		.locked   ()                        // (terminated)
	);

	aesa_radar_hps_system_input_bridge system_input_bridge (
		.clk                (clk_clk),                                                        //                clk.clk
		.reset              (rst_controller_reset_out_reset),                                 //              reset.reset
		.avalon_address     (mm_interconnect_2_system_input_bridge_avalon_slave_address),     //       avalon_slave.address
		.avalon_byteenable  (mm_interconnect_2_system_input_bridge_avalon_slave_byteenable),  //                   .byteenable
		.avalon_chipselect  (mm_interconnect_2_system_input_bridge_avalon_slave_chipselect),  //                   .chipselect
		.avalon_read        (mm_interconnect_2_system_input_bridge_avalon_slave_read),        //                   .read
		.avalon_write       (mm_interconnect_2_system_input_bridge_avalon_slave_write),       //                   .write
		.avalon_writedata   (mm_interconnect_2_system_input_bridge_avalon_slave_writedata),   //                   .writedata
		.avalon_readdata    (mm_interconnect_2_system_input_bridge_avalon_slave_readdata),    //                   .readdata
		.avalon_waitrequest (mm_interconnect_2_system_input_bridge_avalon_slave_waitrequest), //                   .waitrequest
		.avalon_irq         (),                                                               //          interrupt.irq
		.acknowledge        (system_input_bridge_ei_acknowledge),                             // external_interface.export
		.irq                (system_input_bridge_ei_irq),                                     //                   .export
		.address            (system_input_bridge_ei_address),                                 //                   .export
		.bus_enable         (system_input_bridge_ei_bus_enable),                              //                   .export
		.byte_enable        (system_input_bridge_ei_byte_enable),                             //                   .export
		.rw                 (system_input_bridge_ei_rw),                                      //                   .export
		.write_data         (system_input_bridge_ei_write_data),                              //                   .export
		.read_data          (system_input_bridge_ei_read_data)                                //                   .export
	);

	aesa_radar_hps_system_output_bridge system_output_bridge (
		.clk                (clk_clk),                                        //                clk.clk
		.reset              (rst_controller_reset_out_reset),                 //              reset.reset
		.avalon_readdata    (system_output_bridge_avalon_master_readdata),    //      avalon_master.readdata
		.avalon_waitrequest (system_output_bridge_avalon_master_waitrequest), //                   .waitrequest
		.avalon_byteenable  (system_output_bridge_avalon_master_byteenable),  //                   .byteenable
		.avalon_read        (system_output_bridge_avalon_master_read),        //                   .read
		.avalon_write       (system_output_bridge_avalon_master_write),       //                   .write
		.avalon_writedata   (system_output_bridge_avalon_master_writedata),   //                   .writedata
		.avalon_address     (system_output_bridge_avalon_master_address),     //                   .address
		.address            (system_output_bridge_ei_address),                // external_interface.export
		.byte_enable        (system_output_bridge_ei_byte_enable),            //                   .export
		.read               (system_output_bridge_ei_read),                   //                   .export
		.write              (system_output_bridge_ei_write),                  //                   .export
		.write_data         (system_output_bridge_ei_write_data),             //                   .export
		.acknowledge        (system_output_bridge_ei_acknowledge),            //                   .export
		.read_data          (system_output_bridge_ei_read_data)               //                   .export
	);

	aesa_radar_hps_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                                          (clk_clk),                                                                //                                        clk_0_clk.clk
		.system_output_bridge_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                                         // system_output_bridge_reset_reset_bridge_in_reset.reset
		.system_output_bridge_avalon_master_address             (system_output_bridge_avalon_master_address),                             //               system_output_bridge_avalon_master.address
		.system_output_bridge_avalon_master_waitrequest         (system_output_bridge_avalon_master_waitrequest),                         //                                                 .waitrequest
		.system_output_bridge_avalon_master_byteenable          (system_output_bridge_avalon_master_byteenable),                          //                                                 .byteenable
		.system_output_bridge_avalon_master_read                (system_output_bridge_avalon_master_read),                                //                                                 .read
		.system_output_bridge_avalon_master_readdata            (system_output_bridge_avalon_master_readdata),                            //                                                 .readdata
		.system_output_bridge_avalon_master_write               (system_output_bridge_avalon_master_write),                               //                                                 .write
		.system_output_bridge_avalon_master_writedata           (system_output_bridge_avalon_master_writedata),                           //                                                 .writedata
		.address_span_extender_0_windowed_slave_address         (mm_interconnect_0_address_span_extender_0_windowed_slave_address),       //           address_span_extender_0_windowed_slave.address
		.address_span_extender_0_windowed_slave_write           (mm_interconnect_0_address_span_extender_0_windowed_slave_write),         //                                                 .write
		.address_span_extender_0_windowed_slave_read            (mm_interconnect_0_address_span_extender_0_windowed_slave_read),          //                                                 .read
		.address_span_extender_0_windowed_slave_readdata        (mm_interconnect_0_address_span_extender_0_windowed_slave_readdata),      //                                                 .readdata
		.address_span_extender_0_windowed_slave_writedata       (mm_interconnect_0_address_span_extender_0_windowed_slave_writedata),     //                                                 .writedata
		.address_span_extender_0_windowed_slave_burstcount      (mm_interconnect_0_address_span_extender_0_windowed_slave_burstcount),    //                                                 .burstcount
		.address_span_extender_0_windowed_slave_byteenable      (mm_interconnect_0_address_span_extender_0_windowed_slave_byteenable),    //                                                 .byteenable
		.address_span_extender_0_windowed_slave_readdatavalid   (mm_interconnect_0_address_span_extender_0_windowed_slave_readdatavalid), //                                                 .readdatavalid
		.address_span_extender_0_windowed_slave_waitrequest     (mm_interconnect_0_address_span_extender_0_windowed_slave_waitrequest)    //                                                 .waitrequest
	);

	aesa_radar_hps_mm_interconnect_1 mm_interconnect_1 (
		.hps_0_f2h_axi_slave_awid                                  (mm_interconnect_1_hps_0_f2h_axi_slave_awid),            //                                 hps_0_f2h_axi_slave.awid
		.hps_0_f2h_axi_slave_awaddr                                (mm_interconnect_1_hps_0_f2h_axi_slave_awaddr),          //                                                    .awaddr
		.hps_0_f2h_axi_slave_awlen                                 (mm_interconnect_1_hps_0_f2h_axi_slave_awlen),           //                                                    .awlen
		.hps_0_f2h_axi_slave_awsize                                (mm_interconnect_1_hps_0_f2h_axi_slave_awsize),          //                                                    .awsize
		.hps_0_f2h_axi_slave_awburst                               (mm_interconnect_1_hps_0_f2h_axi_slave_awburst),         //                                                    .awburst
		.hps_0_f2h_axi_slave_awlock                                (mm_interconnect_1_hps_0_f2h_axi_slave_awlock),          //                                                    .awlock
		.hps_0_f2h_axi_slave_awcache                               (mm_interconnect_1_hps_0_f2h_axi_slave_awcache),         //                                                    .awcache
		.hps_0_f2h_axi_slave_awprot                                (mm_interconnect_1_hps_0_f2h_axi_slave_awprot),          //                                                    .awprot
		.hps_0_f2h_axi_slave_awuser                                (mm_interconnect_1_hps_0_f2h_axi_slave_awuser),          //                                                    .awuser
		.hps_0_f2h_axi_slave_awvalid                               (mm_interconnect_1_hps_0_f2h_axi_slave_awvalid),         //                                                    .awvalid
		.hps_0_f2h_axi_slave_awready                               (mm_interconnect_1_hps_0_f2h_axi_slave_awready),         //                                                    .awready
		.hps_0_f2h_axi_slave_wid                                   (mm_interconnect_1_hps_0_f2h_axi_slave_wid),             //                                                    .wid
		.hps_0_f2h_axi_slave_wdata                                 (mm_interconnect_1_hps_0_f2h_axi_slave_wdata),           //                                                    .wdata
		.hps_0_f2h_axi_slave_wstrb                                 (mm_interconnect_1_hps_0_f2h_axi_slave_wstrb),           //                                                    .wstrb
		.hps_0_f2h_axi_slave_wlast                                 (mm_interconnect_1_hps_0_f2h_axi_slave_wlast),           //                                                    .wlast
		.hps_0_f2h_axi_slave_wvalid                                (mm_interconnect_1_hps_0_f2h_axi_slave_wvalid),          //                                                    .wvalid
		.hps_0_f2h_axi_slave_wready                                (mm_interconnect_1_hps_0_f2h_axi_slave_wready),          //                                                    .wready
		.hps_0_f2h_axi_slave_bid                                   (mm_interconnect_1_hps_0_f2h_axi_slave_bid),             //                                                    .bid
		.hps_0_f2h_axi_slave_bresp                                 (mm_interconnect_1_hps_0_f2h_axi_slave_bresp),           //                                                    .bresp
		.hps_0_f2h_axi_slave_bvalid                                (mm_interconnect_1_hps_0_f2h_axi_slave_bvalid),          //                                                    .bvalid
		.hps_0_f2h_axi_slave_bready                                (mm_interconnect_1_hps_0_f2h_axi_slave_bready),          //                                                    .bready
		.hps_0_f2h_axi_slave_arid                                  (mm_interconnect_1_hps_0_f2h_axi_slave_arid),            //                                                    .arid
		.hps_0_f2h_axi_slave_araddr                                (mm_interconnect_1_hps_0_f2h_axi_slave_araddr),          //                                                    .araddr
		.hps_0_f2h_axi_slave_arlen                                 (mm_interconnect_1_hps_0_f2h_axi_slave_arlen),           //                                                    .arlen
		.hps_0_f2h_axi_slave_arsize                                (mm_interconnect_1_hps_0_f2h_axi_slave_arsize),          //                                                    .arsize
		.hps_0_f2h_axi_slave_arburst                               (mm_interconnect_1_hps_0_f2h_axi_slave_arburst),         //                                                    .arburst
		.hps_0_f2h_axi_slave_arlock                                (mm_interconnect_1_hps_0_f2h_axi_slave_arlock),          //                                                    .arlock
		.hps_0_f2h_axi_slave_arcache                               (mm_interconnect_1_hps_0_f2h_axi_slave_arcache),         //                                                    .arcache
		.hps_0_f2h_axi_slave_arprot                                (mm_interconnect_1_hps_0_f2h_axi_slave_arprot),          //                                                    .arprot
		.hps_0_f2h_axi_slave_aruser                                (mm_interconnect_1_hps_0_f2h_axi_slave_aruser),          //                                                    .aruser
		.hps_0_f2h_axi_slave_arvalid                               (mm_interconnect_1_hps_0_f2h_axi_slave_arvalid),         //                                                    .arvalid
		.hps_0_f2h_axi_slave_arready                               (mm_interconnect_1_hps_0_f2h_axi_slave_arready),         //                                                    .arready
		.hps_0_f2h_axi_slave_rid                                   (mm_interconnect_1_hps_0_f2h_axi_slave_rid),             //                                                    .rid
		.hps_0_f2h_axi_slave_rdata                                 (mm_interconnect_1_hps_0_f2h_axi_slave_rdata),           //                                                    .rdata
		.hps_0_f2h_axi_slave_rresp                                 (mm_interconnect_1_hps_0_f2h_axi_slave_rresp),           //                                                    .rresp
		.hps_0_f2h_axi_slave_rlast                                 (mm_interconnect_1_hps_0_f2h_axi_slave_rlast),           //                                                    .rlast
		.hps_0_f2h_axi_slave_rvalid                                (mm_interconnect_1_hps_0_f2h_axi_slave_rvalid),          //                                                    .rvalid
		.hps_0_f2h_axi_slave_rready                                (mm_interconnect_1_hps_0_f2h_axi_slave_rready),          //                                                    .rready
		.clk_0_clk_clk                                             (clk_clk),                                               //                                           clk_0_clk.clk
		.address_span_extender_0_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                        // address_span_extender_0_reset_reset_bridge_in_reset.reset
		.address_span_extender_0_expanded_master_address           (address_span_extender_0_expanded_master_address),       //             address_span_extender_0_expanded_master.address
		.address_span_extender_0_expanded_master_waitrequest       (address_span_extender_0_expanded_master_waitrequest),   //                                                    .waitrequest
		.address_span_extender_0_expanded_master_burstcount        (address_span_extender_0_expanded_master_burstcount),    //                                                    .burstcount
		.address_span_extender_0_expanded_master_byteenable        (address_span_extender_0_expanded_master_byteenable),    //                                                    .byteenable
		.address_span_extender_0_expanded_master_read              (address_span_extender_0_expanded_master_read),          //                                                    .read
		.address_span_extender_0_expanded_master_readdata          (address_span_extender_0_expanded_master_readdata),      //                                                    .readdata
		.address_span_extender_0_expanded_master_readdatavalid     (address_span_extender_0_expanded_master_readdatavalid), //                                                    .readdatavalid
		.address_span_extender_0_expanded_master_write             (address_span_extender_0_expanded_master_write),         //                                                    .write
		.address_span_extender_0_expanded_master_writedata         (address_span_extender_0_expanded_master_writedata)      //                                                    .writedata
	);

	aesa_radar_hps_mm_interconnect_2 mm_interconnect_2 (
		.hps_0_h2f_axi_master_awid                             (hps_0_h2f_axi_master_awid),                                      //                            hps_0_h2f_axi_master.awid
		.hps_0_h2f_axi_master_awaddr                           (hps_0_h2f_axi_master_awaddr),                                    //                                                .awaddr
		.hps_0_h2f_axi_master_awlen                            (hps_0_h2f_axi_master_awlen),                                     //                                                .awlen
		.hps_0_h2f_axi_master_awsize                           (hps_0_h2f_axi_master_awsize),                                    //                                                .awsize
		.hps_0_h2f_axi_master_awburst                          (hps_0_h2f_axi_master_awburst),                                   //                                                .awburst
		.hps_0_h2f_axi_master_awlock                           (hps_0_h2f_axi_master_awlock),                                    //                                                .awlock
		.hps_0_h2f_axi_master_awcache                          (hps_0_h2f_axi_master_awcache),                                   //                                                .awcache
		.hps_0_h2f_axi_master_awprot                           (hps_0_h2f_axi_master_awprot),                                    //                                                .awprot
		.hps_0_h2f_axi_master_awvalid                          (hps_0_h2f_axi_master_awvalid),                                   //                                                .awvalid
		.hps_0_h2f_axi_master_awready                          (hps_0_h2f_axi_master_awready),                                   //                                                .awready
		.hps_0_h2f_axi_master_wid                              (hps_0_h2f_axi_master_wid),                                       //                                                .wid
		.hps_0_h2f_axi_master_wdata                            (hps_0_h2f_axi_master_wdata),                                     //                                                .wdata
		.hps_0_h2f_axi_master_wstrb                            (hps_0_h2f_axi_master_wstrb),                                     //                                                .wstrb
		.hps_0_h2f_axi_master_wlast                            (hps_0_h2f_axi_master_wlast),                                     //                                                .wlast
		.hps_0_h2f_axi_master_wvalid                           (hps_0_h2f_axi_master_wvalid),                                    //                                                .wvalid
		.hps_0_h2f_axi_master_wready                           (hps_0_h2f_axi_master_wready),                                    //                                                .wready
		.hps_0_h2f_axi_master_bid                              (hps_0_h2f_axi_master_bid),                                       //                                                .bid
		.hps_0_h2f_axi_master_bresp                            (hps_0_h2f_axi_master_bresp),                                     //                                                .bresp
		.hps_0_h2f_axi_master_bvalid                           (hps_0_h2f_axi_master_bvalid),                                    //                                                .bvalid
		.hps_0_h2f_axi_master_bready                           (hps_0_h2f_axi_master_bready),                                    //                                                .bready
		.hps_0_h2f_axi_master_arid                             (hps_0_h2f_axi_master_arid),                                      //                                                .arid
		.hps_0_h2f_axi_master_araddr                           (hps_0_h2f_axi_master_araddr),                                    //                                                .araddr
		.hps_0_h2f_axi_master_arlen                            (hps_0_h2f_axi_master_arlen),                                     //                                                .arlen
		.hps_0_h2f_axi_master_arsize                           (hps_0_h2f_axi_master_arsize),                                    //                                                .arsize
		.hps_0_h2f_axi_master_arburst                          (hps_0_h2f_axi_master_arburst),                                   //                                                .arburst
		.hps_0_h2f_axi_master_arlock                           (hps_0_h2f_axi_master_arlock),                                    //                                                .arlock
		.hps_0_h2f_axi_master_arcache                          (hps_0_h2f_axi_master_arcache),                                   //                                                .arcache
		.hps_0_h2f_axi_master_arprot                           (hps_0_h2f_axi_master_arprot),                                    //                                                .arprot
		.hps_0_h2f_axi_master_arvalid                          (hps_0_h2f_axi_master_arvalid),                                   //                                                .arvalid
		.hps_0_h2f_axi_master_arready                          (hps_0_h2f_axi_master_arready),                                   //                                                .arready
		.hps_0_h2f_axi_master_rid                              (hps_0_h2f_axi_master_rid),                                       //                                                .rid
		.hps_0_h2f_axi_master_rdata                            (hps_0_h2f_axi_master_rdata),                                     //                                                .rdata
		.hps_0_h2f_axi_master_rresp                            (hps_0_h2f_axi_master_rresp),                                     //                                                .rresp
		.hps_0_h2f_axi_master_rlast                            (hps_0_h2f_axi_master_rlast),                                     //                                                .rlast
		.hps_0_h2f_axi_master_rvalid                           (hps_0_h2f_axi_master_rvalid),                                    //                                                .rvalid
		.hps_0_h2f_axi_master_rready                           (hps_0_h2f_axi_master_rready),                                    //                                                .rready
		.clk_0_clk_clk                                         (clk_clk),                                                        //                                       clk_0_clk.clk
		.system_input_bridge_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                                 // system_input_bridge_reset_reset_bridge_in_reset.reset
		.system_input_bridge_avalon_slave_address              (mm_interconnect_2_system_input_bridge_avalon_slave_address),     //                system_input_bridge_avalon_slave.address
		.system_input_bridge_avalon_slave_write                (mm_interconnect_2_system_input_bridge_avalon_slave_write),       //                                                .write
		.system_input_bridge_avalon_slave_read                 (mm_interconnect_2_system_input_bridge_avalon_slave_read),        //                                                .read
		.system_input_bridge_avalon_slave_readdata             (mm_interconnect_2_system_input_bridge_avalon_slave_readdata),    //                                                .readdata
		.system_input_bridge_avalon_slave_writedata            (mm_interconnect_2_system_input_bridge_avalon_slave_writedata),   //                                                .writedata
		.system_input_bridge_avalon_slave_byteenable           (mm_interconnect_2_system_input_bridge_avalon_slave_byteenable),  //                                                .byteenable
		.system_input_bridge_avalon_slave_waitrequest          (mm_interconnect_2_system_input_bridge_avalon_slave_waitrequest), //                                                .waitrequest
		.system_input_bridge_avalon_slave_chipselect           (mm_interconnect_2_system_input_bridge_avalon_slave_chipselect)   //                                                .chipselect
	);

	aesa_radar_hps_mm_interconnect_3 mm_interconnect_3 (
		.hps_0_h2f_lw_axi_master_awid                   (hps_0_h2f_lw_axi_master_awid),                 //                  hps_0_h2f_lw_axi_master.awid
		.hps_0_h2f_lw_axi_master_awaddr                 (hps_0_h2f_lw_axi_master_awaddr),               //                                         .awaddr
		.hps_0_h2f_lw_axi_master_awlen                  (hps_0_h2f_lw_axi_master_awlen),                //                                         .awlen
		.hps_0_h2f_lw_axi_master_awsize                 (hps_0_h2f_lw_axi_master_awsize),               //                                         .awsize
		.hps_0_h2f_lw_axi_master_awburst                (hps_0_h2f_lw_axi_master_awburst),              //                                         .awburst
		.hps_0_h2f_lw_axi_master_awlock                 (hps_0_h2f_lw_axi_master_awlock),               //                                         .awlock
		.hps_0_h2f_lw_axi_master_awcache                (hps_0_h2f_lw_axi_master_awcache),              //                                         .awcache
		.hps_0_h2f_lw_axi_master_awprot                 (hps_0_h2f_lw_axi_master_awprot),               //                                         .awprot
		.hps_0_h2f_lw_axi_master_awvalid                (hps_0_h2f_lw_axi_master_awvalid),              //                                         .awvalid
		.hps_0_h2f_lw_axi_master_awready                (hps_0_h2f_lw_axi_master_awready),              //                                         .awready
		.hps_0_h2f_lw_axi_master_wid                    (hps_0_h2f_lw_axi_master_wid),                  //                                         .wid
		.hps_0_h2f_lw_axi_master_wdata                  (hps_0_h2f_lw_axi_master_wdata),                //                                         .wdata
		.hps_0_h2f_lw_axi_master_wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                //                                         .wstrb
		.hps_0_h2f_lw_axi_master_wlast                  (hps_0_h2f_lw_axi_master_wlast),                //                                         .wlast
		.hps_0_h2f_lw_axi_master_wvalid                 (hps_0_h2f_lw_axi_master_wvalid),               //                                         .wvalid
		.hps_0_h2f_lw_axi_master_wready                 (hps_0_h2f_lw_axi_master_wready),               //                                         .wready
		.hps_0_h2f_lw_axi_master_bid                    (hps_0_h2f_lw_axi_master_bid),                  //                                         .bid
		.hps_0_h2f_lw_axi_master_bresp                  (hps_0_h2f_lw_axi_master_bresp),                //                                         .bresp
		.hps_0_h2f_lw_axi_master_bvalid                 (hps_0_h2f_lw_axi_master_bvalid),               //                                         .bvalid
		.hps_0_h2f_lw_axi_master_bready                 (hps_0_h2f_lw_axi_master_bready),               //                                         .bready
		.hps_0_h2f_lw_axi_master_arid                   (hps_0_h2f_lw_axi_master_arid),                 //                                         .arid
		.hps_0_h2f_lw_axi_master_araddr                 (hps_0_h2f_lw_axi_master_araddr),               //                                         .araddr
		.hps_0_h2f_lw_axi_master_arlen                  (hps_0_h2f_lw_axi_master_arlen),                //                                         .arlen
		.hps_0_h2f_lw_axi_master_arsize                 (hps_0_h2f_lw_axi_master_arsize),               //                                         .arsize
		.hps_0_h2f_lw_axi_master_arburst                (hps_0_h2f_lw_axi_master_arburst),              //                                         .arburst
		.hps_0_h2f_lw_axi_master_arlock                 (hps_0_h2f_lw_axi_master_arlock),               //                                         .arlock
		.hps_0_h2f_lw_axi_master_arcache                (hps_0_h2f_lw_axi_master_arcache),              //                                         .arcache
		.hps_0_h2f_lw_axi_master_arprot                 (hps_0_h2f_lw_axi_master_arprot),               //                                         .arprot
		.hps_0_h2f_lw_axi_master_arvalid                (hps_0_h2f_lw_axi_master_arvalid),              //                                         .arvalid
		.hps_0_h2f_lw_axi_master_arready                (hps_0_h2f_lw_axi_master_arready),              //                                         .arready
		.hps_0_h2f_lw_axi_master_rid                    (hps_0_h2f_lw_axi_master_rid),                  //                                         .rid
		.hps_0_h2f_lw_axi_master_rdata                  (hps_0_h2f_lw_axi_master_rdata),                //                                         .rdata
		.hps_0_h2f_lw_axi_master_rresp                  (hps_0_h2f_lw_axi_master_rresp),                //                                         .rresp
		.hps_0_h2f_lw_axi_master_rlast                  (hps_0_h2f_lw_axi_master_rlast),                //                                         .rlast
		.hps_0_h2f_lw_axi_master_rvalid                 (hps_0_h2f_lw_axi_master_rvalid),               //                                         .rvalid
		.hps_0_h2f_lw_axi_master_rready                 (hps_0_h2f_lw_axi_master_rready),               //                                         .rready
		.clk_0_clk_clk                                  (clk_clk),                                      //                                clk_0_clk.clk
		.hps_register_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),               // hps_register_reset_reset_bridge_in_reset.reset
		.fpga_register_s1_address                       (mm_interconnect_3_fpga_register_s1_address),   //                         fpga_register_s1.address
		.fpga_register_s1_readdata                      (mm_interconnect_3_fpga_register_s1_readdata),  //                                         .readdata
		.hps_register_s1_address                        (mm_interconnect_3_hps_register_s1_address),    //                          hps_register_s1.address
		.hps_register_s1_write                          (mm_interconnect_3_hps_register_s1_write),      //                                         .write
		.hps_register_s1_readdata                       (mm_interconnect_3_hps_register_s1_readdata),   //                                         .readdata
		.hps_register_s1_writedata                      (mm_interconnect_3_hps_register_s1_writedata),  //                                         .writedata
		.hps_register_s1_chipselect                     (mm_interconnect_3_hps_register_s1_chipselect)  //                                         .chipselect
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~hps_0_h2f_reset_reset),         // reset_in0.reset
		.clk            (clk_clk),                        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

endmodule
