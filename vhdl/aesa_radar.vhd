
---------------------------------------------------------
--  This code is generated by Terasic System Builder
---------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;

entity aesa_radar is
port
(

	------------ CLOCK ------------
	CLOCK_50        	:in    	std_logic;

	------------ HPS ------------
	HPS_DDR3_ADDR   	:out   	std_logic_vector(14 downto 0);
	HPS_DDR3_BA     	:out   	std_logic_vector(2 downto 0);
	HPS_DDR3_CAS_N  	:out   	std_logic;
	HPS_DDR3_CKE    	:out   	std_logic;
	HPS_DDR3_CK_N   	:out   	std_logic;
	HPS_DDR3_CK_P   	:out   	std_logic;
	HPS_DDR3_CS_N   	:out   	std_logic;
	HPS_DDR3_DM     	:out   	std_logic_vector(3 downto 0);
	HPS_DDR3_DQ     	:inout 	std_logic_vector(31 downto 0);
	HPS_DDR3_DQS_N  	:inout 	std_logic_vector(3 downto 0);
	HPS_DDR3_DQS_P  	:inout 	std_logic_vector(3 downto 0);
	HPS_DDR3_ODT    	:out   	std_logic;
	HPS_DDR3_RAS_N  	:out   	std_logic;
	HPS_DDR3_RESET_N	:out   	std_logic;
	HPS_DDR3_RZQ    	:in    	std_logic;
	HPS_DDR3_WE_N   	:out   	std_logic;
	HPS_ENET_GTX_CLK	:out   	std_logic;
	HPS_ENET_INT_N  	:inout 	std_logic;
	HPS_ENET_MDC    	:out   	std_logic;
	HPS_ENET_MDIO   	:inout 	std_logic;
	HPS_ENET_RX_CLK 	:in    	std_logic;
	HPS_ENET_RX_DATA	:in    	std_logic_vector(3 downto 0);
	HPS_ENET_RX_DV  	:in    	std_logic;
	HPS_ENET_TX_DATA	:out   	std_logic_vector(3 downto 0);
	HPS_ENET_TX_EN  	:out   	std_logic;
	HPS_SD_CLK      	:out   	std_logic;
	HPS_SD_CMD      	:inout 	std_logic;
	HPS_SD_DATA     	:inout 	std_logic_vector(3 downto 0);
	HPS_UART_RX     	:in    	std_logic;
	HPS_UART_TX     	:out   	std_logic;
	HPS_USB_CLKOUT  	:in    	std_logic;
	HPS_USB_DATA    	:inout 	std_logic_vector(7 downto 0);
	HPS_USB_DIR     	:in    	std_logic;
	HPS_USB_NXT     	:in    	std_logic;
	HPS_USB_STP     	:out   	std_logic
);

end entity;



---------------------------------------------------------
--  Structural coding
---------------------------------------------------------


architecture rtl of aesa_radar is
    component aesa_radar_hps is
        port (
            clk_clk                             : in    std_logic                     := 'X';             -- clk
            fpga_state_reg_export               : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- export
            hps_io_hps_io_emac1_inst_TX_CLK     : out   std_logic;                                        -- hps_io_emac1_inst_TX_CLK
            hps_io_hps_io_emac1_inst_TXD0       : out   std_logic;                                        -- hps_io_emac1_inst_TXD0
            hps_io_hps_io_emac1_inst_TXD1       : out   std_logic;                                        -- hps_io_emac1_inst_TXD1
            hps_io_hps_io_emac1_inst_TXD2       : out   std_logic;                                        -- hps_io_emac1_inst_TXD2
            hps_io_hps_io_emac1_inst_TXD3       : out   std_logic;                                        -- hps_io_emac1_inst_TXD3
            hps_io_hps_io_emac1_inst_RXD0       : in    std_logic                     := 'X';             -- hps_io_emac1_inst_RXD0
            hps_io_hps_io_emac1_inst_MDIO       : inout std_logic                     := 'X';             -- hps_io_emac1_inst_MDIO
            hps_io_hps_io_emac1_inst_MDC        : out   std_logic;                                        -- hps_io_emac1_inst_MDC
            hps_io_hps_io_emac1_inst_RX_CTL     : in    std_logic                     := 'X';             -- hps_io_emac1_inst_RX_CTL
            hps_io_hps_io_emac1_inst_TX_CTL     : out   std_logic;                                        -- hps_io_emac1_inst_TX_CTL
            hps_io_hps_io_emac1_inst_RX_CLK     : in    std_logic                     := 'X';             -- hps_io_emac1_inst_RX_CLK
            hps_io_hps_io_emac1_inst_RXD1       : in    std_logic                     := 'X';             -- hps_io_emac1_inst_RXD1
            hps_io_hps_io_emac1_inst_RXD2       : in    std_logic                     := 'X';             -- hps_io_emac1_inst_RXD2
            hps_io_hps_io_emac1_inst_RXD3       : in    std_logic                     := 'X';             -- hps_io_emac1_inst_RXD3
            hps_io_hps_io_sdio_inst_CMD         : inout std_logic                     := 'X';             -- hps_io_sdio_inst_CMD
            hps_io_hps_io_sdio_inst_D0          : inout std_logic                     := 'X';             -- hps_io_sdio_inst_D0
            hps_io_hps_io_sdio_inst_D1          : inout std_logic                     := 'X';             -- hps_io_sdio_inst_D1
            hps_io_hps_io_sdio_inst_CLK         : out   std_logic;                                        -- hps_io_sdio_inst_CLK
            hps_io_hps_io_sdio_inst_D2          : inout std_logic                     := 'X';             -- hps_io_sdio_inst_D2
            hps_io_hps_io_sdio_inst_D3          : inout std_logic                     := 'X';             -- hps_io_sdio_inst_D3
            hps_io_hps_io_usb1_inst_D0          : inout std_logic                     := 'X';             -- hps_io_usb1_inst_D0
            hps_io_hps_io_usb1_inst_D1          : inout std_logic                     := 'X';             -- hps_io_usb1_inst_D1
            hps_io_hps_io_usb1_inst_D2          : inout std_logic                     := 'X';             -- hps_io_usb1_inst_D2
            hps_io_hps_io_usb1_inst_D3          : inout std_logic                     := 'X';             -- hps_io_usb1_inst_D3
            hps_io_hps_io_usb1_inst_D4          : inout std_logic                     := 'X';             -- hps_io_usb1_inst_D4
            hps_io_hps_io_usb1_inst_D5          : inout std_logic                     := 'X';             -- hps_io_usb1_inst_D5
            hps_io_hps_io_usb1_inst_D6          : inout std_logic                     := 'X';             -- hps_io_usb1_inst_D6
            hps_io_hps_io_usb1_inst_D7          : inout std_logic                     := 'X';             -- hps_io_usb1_inst_D7
            hps_io_hps_io_usb1_inst_CLK         : in    std_logic                     := 'X';             -- hps_io_usb1_inst_CLK
            hps_io_hps_io_usb1_inst_STP         : out   std_logic;                                        -- hps_io_usb1_inst_STP
            hps_io_hps_io_usb1_inst_DIR         : in    std_logic                     := 'X';             -- hps_io_usb1_inst_DIR
            hps_io_hps_io_usb1_inst_NXT         : in    std_logic                     := 'X';             -- hps_io_usb1_inst_NXT
            hps_io_hps_io_uart0_inst_RX         : in    std_logic                     := 'X';             -- hps_io_uart0_inst_RX
            hps_io_hps_io_uart0_inst_TX         : out   std_logic;                                        -- hps_io_uart0_inst_TX
            hps_io_hps_io_gpio_inst_GPIO35      : inout std_logic                     := 'X';             -- hps_io_gpio_inst_GPIO35
            hps_state_reg_export                : out   std_logic_vector(7 downto 0);                     -- export
            memory_mem_a                        : out   std_logic_vector(14 downto 0);                    -- mem_a
            memory_mem_ba                       : out   std_logic_vector(2 downto 0);                     -- mem_ba
            memory_mem_ck                       : out   std_logic;                                        -- mem_ck
            memory_mem_ck_n                     : out   std_logic;                                        -- mem_ck_n
            memory_mem_cke                      : out   std_logic;                                        -- mem_cke
            memory_mem_cs_n                     : out   std_logic;                                        -- mem_cs_n
            memory_mem_ras_n                    : out   std_logic;                                        -- mem_ras_n
            memory_mem_cas_n                    : out   std_logic;                                        -- mem_cas_n
            memory_mem_we_n                     : out   std_logic;                                        -- mem_we_n
            memory_mem_reset_n                  : out   std_logic;                                        -- mem_reset_n
            memory_mem_dq                       : inout std_logic_vector(31 downto 0) := (others => 'X'); -- mem_dq
            memory_mem_dqs                      : inout std_logic_vector(3 downto 0)  := (others => 'X'); -- mem_dqs
            memory_mem_dqs_n                    : inout std_logic_vector(3 downto 0)  := (others => 'X'); -- mem_dqs_n
            memory_mem_odt                      : out   std_logic;                                        -- mem_odt
            memory_mem_dm                       : out   std_logic_vector(3 downto 0);                     -- mem_dm
            memory_oct_rzqin                    : in    std_logic                     := 'X';             -- oct_rzqin
            system_input_bridge_ei_acknowledge  : in    std_logic                     := 'X';             -- acknowledge
            system_input_bridge_ei_irq          : in    std_logic                     := 'X';             -- irq
            system_input_bridge_ei_address      : out   std_logic_vector(5 downto 0);                     -- address
            system_input_bridge_ei_bus_enable   : out   std_logic;                                        -- bus_enable
            system_input_bridge_ei_byte_enable  : out   std_logic_vector(3 downto 0);                     -- byte_enable
            system_input_bridge_ei_rw           : out   std_logic;                                        -- rw
            system_input_bridge_ei_write_data   : out   std_logic_vector(31 downto 0);                    -- write_data
            system_input_bridge_ei_read_data    : in    std_logic_vector(31 downto 0) := (others => 'X'); -- read_data
            system_output_bridge_ei_address     : in    std_logic_vector(29 downto 0) := (others => 'X'); -- address
            system_output_bridge_ei_byte_enable : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- byte_enable
            system_output_bridge_ei_read        : in    std_logic                     := 'X';             -- read
            system_output_bridge_ei_write       : in    std_logic                     := 'X';             -- write
            system_output_bridge_ei_write_data  : in    std_logic_vector(63 downto 0) := (others => 'X'); -- write_data
            system_output_bridge_ei_acknowledge : out   std_logic;                                        -- acknowledge
            system_output_bridge_ei_read_data   : out   std_logic_vector(63 downto 0);                    -- read_data
				pll_0_outclk0_clk                   : out   std_logic                                         -- clk
        );
    end component aesa_radar_hps;
	 
    component aesa is
		 port (
			  -- CLOCKS
			  hps_clk    : in std_logic;
			  fpga_clk   : in std_logic;     

			  -- HPS-TO-FPGA AXI-BUS
			  h2f_addr   : in std_logic_vector ( 3 downto 0);
			  h2f_data   : in std_logic_vector (31 downto 0);
			  h2f_bus_en : in std_logic;
			  h2f_rw     : in std_logic;
			  h2f_ack    : out std_logic;

			  -- FPGA-TO-HPS AXI-BUS
			  f2h_addr   : out std_logic_vector(29 downto 0);
			  f2h_be     : out std_logic_vector( 7 downto 0);
			  f2h_read   : out std_logic;
			  f2h_write  : out std_logic;
			  f2h_data   : out std_logic_vector(63 downto 0);
			  f2h_ack    : in  std_logic;

			  -- HPS_TO_FPGA AXI_LW_BUS
			  axilw_hps  : in  std_logic_vector( 3 downto 0);
			  axilw_fpga : out std_logic_vector( 3 downto 0)
		 );
	end component aesa;
	
	signal fpga_clk : std_logic;
	
	signal h2f_addr :   std_logic_vector ( 3 downto 0);
   signal h2f_data :   std_logic_vector (31 downto 0);
   signal h2f_bus_en : std_logic;
   signal h2f_rw :     std_logic;
   signal h2f_ack :    std_logic;
	signal h2f_addr_i : std_logic_vector(5 downto 0);

   -- FPGA-TO-HPS AXI-BUS
   signal f2h_addr :   std_logic_vector(29 downto 0);
   signal f2h_be :     std_logic_vector( 7 downto 0);
   signal f2h_read :   std_logic;
   signal f2h_write :  std_logic;
   signal f2h_data :   std_logic_vector(63 downto 0);
   signal f2h_ack :    std_logic;

   -- HPS_TO_FPGA AXI_LW_BUS
   signal axilw_hps :  std_logic_vector( 3 downto 0);
   signal axilw_fpga : std_logic_vector( 3 downto 0);
	signal axilw_hps_i : std_logic_vector( 7 downto 0);
	signal axilw_fpga_i : std_logic_vector( 7 downto 0);
	
begin

	h2f_addr <= h2f_addr_i(5 downto 2);
	axilw_fpga_i <= "0000" & axilw_fpga;
	axilw_hps <= axilw_hps_i (3 downto 0);

	u0 : component aesa_radar_hps
        port map (
            clk_clk                             => CLOCK_50,                             --                     clk.clk
            fpga_state_reg_export               => axilw_fpga_i,               --          fpga_state_reg.export
            hps_io_hps_io_emac1_inst_TX_CLK     => HPS_ENET_GTX_CLK,         --                      hps_io.hps_io_emac1_inst_TX_CLK
            hps_io_hps_io_emac1_inst_TXD0       => HPS_ENET_TX_DATA(0),           --                            .hps_io_emac1_inst_TXD0
            hps_io_hps_io_emac1_inst_TXD1       => HPS_ENET_TX_DATA(1),           --                            .hps_io_emac1_inst_TXD1
            hps_io_hps_io_emac1_inst_TXD2       => HPS_ENET_TX_DATA(2),           --                            .hps_io_emac1_inst_TXD2
            hps_io_hps_io_emac1_inst_TXD3       => HPS_ENET_TX_DATA(3),           --                            .hps_io_emac1_inst_TXD3
            hps_io_hps_io_emac1_inst_RXD0       => HPS_ENET_RX_DATA(0),           --                            .hps_io_emac1_inst_RXD0
            hps_io_hps_io_emac1_inst_MDIO       => HPS_ENET_MDIO,           --                            .hps_io_emac1_inst_MDIO
            hps_io_hps_io_emac1_inst_MDC        => HPS_ENET_MDC,            --                            .hps_io_emac1_inst_MDC
            hps_io_hps_io_emac1_inst_RX_CTL     => HPS_ENET_RX_DV,         --                            .hps_io_emac1_inst_RX_CTL
            hps_io_hps_io_emac1_inst_TX_CTL     => HPS_ENET_TX_EN,         --                            .hps_io_emac1_inst_TX_CTL
            hps_io_hps_io_emac1_inst_RX_CLK     => HPS_ENET_RX_CLK,         --                            .hps_io_emac1_inst_RX_CLK
            hps_io_hps_io_emac1_inst_RXD1       => HPS_ENET_RX_DATA(1),           --                            .hps_io_emac1_inst_RXD1
            hps_io_hps_io_emac1_inst_RXD2       => HPS_ENET_RX_DATA(2),           --                            .hps_io_emac1_inst_RXD2
            hps_io_hps_io_emac1_inst_RXD3       => HPS_ENET_RX_DATA(3),           --                            .hps_io_emac1_inst_RXD3
            hps_io_hps_io_sdio_inst_CMD         => HPS_SD_CMD,             --                            .hps_io_sdio_inst_CMD
            hps_io_hps_io_sdio_inst_D0          => HPS_SD_DATA(0),              --                            .hps_io_sdio_inst_D0
            hps_io_hps_io_sdio_inst_D1          => HPS_SD_DATA(1),              --                            .hps_io_sdio_inst_D1
            hps_io_hps_io_sdio_inst_CLK         => HPS_SD_CLK,             --                            .hps_io_sdio_inst_CLK
            hps_io_hps_io_sdio_inst_D2          => HPS_SD_DATA(2),              --                            .hps_io_sdio_inst_D2
            hps_io_hps_io_sdio_inst_D3          => HPS_SD_DATA(3),              --                            .hps_io_sdio_inst_D3
            hps_io_hps_io_usb1_inst_D0          => HPS_USB_DATA(0),              --                            .hps_io_usb1_inst_D0
            hps_io_hps_io_usb1_inst_D1          => HPS_USB_DATA(1),              --                            .hps_io_usb1_inst_D1
            hps_io_hps_io_usb1_inst_D2          => HPS_USB_DATA(2),              --                            .hps_io_usb1_inst_D2
            hps_io_hps_io_usb1_inst_D3          => HPS_USB_DATA(3),              --                            .hps_io_usb1_inst_D3
            hps_io_hps_io_usb1_inst_D4          => HPS_USB_DATA(4),              --                            .hps_io_usb1_inst_D4
            hps_io_hps_io_usb1_inst_D5          => HPS_USB_DATA(5),              --                            .hps_io_usb1_inst_D5
            hps_io_hps_io_usb1_inst_D6          => HPS_USB_DATA(6),              --                            .hps_io_usb1_inst_D6
            hps_io_hps_io_usb1_inst_D7          => HPS_USB_DATA(7),              --                            .hps_io_usb1_inst_D7
            hps_io_hps_io_usb1_inst_CLK         => HPS_USB_CLKOUT,             --                            .hps_io_usb1_inst_CLK
            hps_io_hps_io_usb1_inst_STP         => HPS_USB_STP,             --                            .hps_io_usb1_inst_STP
            hps_io_hps_io_usb1_inst_DIR         => HPS_USB_DIR,             --                            .hps_io_usb1_inst_DIR
            hps_io_hps_io_usb1_inst_NXT         => HPS_USB_NXT,             --                            .hps_io_usb1_inst_NXT
            hps_io_hps_io_uart0_inst_RX         => HPS_UART_RX,             --                            .hps_io_uart0_inst_RX
            hps_io_hps_io_uart0_inst_TX         => HPS_UART_TX,             --                            .hps_io_uart0_inst_TX
            hps_io_hps_io_gpio_inst_GPIO35      => HPS_ENET_INT_N,      --                        .hps_io_gpio_inst_GPIO35
            hps_state_reg_export                => axilw_hps_i,                --           hps_state_reg.export
            memory_mem_a                        => HPS_DDR3_ADDR,                            --                      memory.mem_a
            memory_mem_ba                       => HPS_DDR3_BA,                           --                            .mem_ba
            memory_mem_ck                       => HPS_DDR3_CK_P,                           --                            .mem_ck
            memory_mem_ck_n                     => HPS_DDR3_CK_N,                         --                            .mem_ck_n
            memory_mem_cke                      => HPS_DDR3_CKE,                          --                            .mem_cke
            memory_mem_cs_n                     => HPS_DDR3_CS_N,                         --                            .mem_cs_n
            memory_mem_ras_n                    => HPS_DDR3_RAS_N,                        --                            .mem_ras_n
            memory_mem_cas_n                    => HPS_DDR3_CAS_N,                        --                            .mem_cas_n
            memory_mem_we_n                     => HPS_DDR3_WE_N,                         --                            .mem_we_n
            memory_mem_reset_n                  => HPS_DDR3_RESET_N,                      --                            .mem_reset_n
            memory_mem_dq                       => HPS_DDR3_DQ,                           --                            .mem_dq
            memory_mem_dqs                      => HPS_DDR3_DQS_P,                          --                            .mem_dqs
            memory_mem_dqs_n                    => HPS_DDR3_DQS_N,                        --                            .mem_dqs_n
            memory_mem_odt                      => HPS_DDR3_ODT,                          --                            .mem_odt
            memory_mem_dm                       => HPS_DDR3_DM,                           --                            .mem_dm
            memory_oct_rzqin                    => HPS_DDR3_RZQ,                    --                        .oct_rzqin
            system_input_bridge_ei_acknowledge  => h2f_ack,  --  system_input_bridge_ei.acknowledge
            system_input_bridge_ei_irq          => '0',          --                        .irq
            system_input_bridge_ei_address      => h2f_addr_i,      --                        .address
            system_input_bridge_ei_bus_enable   => h2f_bus_en,   --                        .bus_enable
            system_input_bridge_ei_byte_enable  => open,  --                        .byte_enable
            system_input_bridge_ei_rw           => h2f_rw,           --                        .rw
            system_input_bridge_ei_write_data   => h2f_data,   --                        .write_data
            system_input_bridge_ei_read_data    => (others => '0'),    --                        .read_data
            system_output_bridge_ei_address     => f2h_addr,     -- system_output_bridge_ei.address
            system_output_bridge_ei_byte_enable => f2h_be, --                        .byte_enable
            system_output_bridge_ei_read        => f2h_read,        --                        .read
            system_output_bridge_ei_write       => f2h_write,       --                        .write
            system_output_bridge_ei_write_data  => f2h_data,  --                        .write_data
            system_output_bridge_ei_acknowledge => f2h_ack, --                        .acknowledge
            system_output_bridge_ei_read_data   => open,    --                        .read_data
				pll_0_outclk0_clk                   => fpga_clk
        );
		  
		  aesa_inst : component aesa
        port map (
			  -- CLOCKS
			  hps_clk    => CLOCK_50,
			  fpga_clk   => fpga_clk,     

			  -- HPS-TO-FPGA AXI-BUS
			  h2f_addr   => h2f_addr,
			  h2f_data   => h2f_data,
			  h2f_bus_en => h2f_bus_en,
			  h2f_rw     => h2f_rw,
			  h2f_ack    => h2f_ack,

			  -- FPGA-TO-HPS AXI-BUS
			  f2h_addr   => f2h_addr,
			  f2h_be     => f2h_be,
			  f2h_read   => f2h_read,
			  f2h_write  => f2h_write,
			  f2h_data   => f2h_data,
			  f2h_ack    => f2h_ack,

			  -- HPS_TO_FPGA AXI_LW_BUS
			  axilw_hps  => axilw_hps,
			  axilw_fpga => axilw_fpga
		 );

end rtl;
